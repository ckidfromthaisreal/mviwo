{"version":3,"sources":["webpack:///./node_modules/@angular/cdk/esm5/text-field.es5.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/material/esm5/input.es5.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/material/form-field/typings/index.ngfactory.js.pre-build-optimizer.js","webpack:///./node_modules/@angular/material/form-field/typings/index.d.ts.MatFormField.html","webpack:///./node_modules/@angular/material/esm5/form-field.es5.js.pre-build-optimizer.js"],"names":["rxjs_operators__WEBPACK_IMPORTED_MODULE_7__","__webpack_require__","listenerOptions","Object","_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_0__","passive","AutofillMonitor","_platform","_ngZone","this","_monitoredElements","Map","prototype","monitor","element","_this","isBrowser","rxjs__WEBPACK_IMPORTED_MODULE_2__","info","get","subject","asObservable","result","rxjs__WEBPACK_IMPORTED_MODULE_3__","cssClass","listener","event","animationName","classList","contains","remove","run","next","target","isAutofilled","add","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","stopMonitoring","complete","delete","ngOnDestroy","forEach","_info","ngInjectableDef","_angular_core__WEBPACK_IMPORTED_MODULE_1__","factory","token","providedIn","CdkTextareaAutosize","_elementRef","_destroyed","_enabled","_textareaElement","defineProperty","_minRows","value","_setMinHeight","enumerable","configurable","_maxRows","_setMaxHeight","_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_5__","resizeToFitContent","reset","minHeight","minRows","_cachedLineHeight","_setTextareaStyle","maxHeight","maxRows","ngAfterViewInit","_initialHeight","style","height","rxjs__WEBPACK_IMPORTED_MODULE_4__","window","pipe","rxjs_operators__WEBPACK_IMPORTED_MODULE_6__","subscribe","property","_cacheTextareaLineHeight","textareaClone","cloneNode","rows","position","visibility","border","padding","overflow","appendChild","clientHeight","removeChild","ngDoCheck","force","textarea","_previousValue","placeholderText","placeholder","scrollHeight","requestAnimationFrame","isStopped","document","activeElement","setSelectionRange","selectionStart","selectionEnd","undefined","_noopInputHandler","TextFieldModule","rxjs__WEBPACK_IMPORTED_MODULE_6__","MatTextareaAutosize","_super","apply","arguments","tslib__WEBPACK_IMPORTED_MODULE_0__","enabled","_angular_cdk_text_field__WEBPACK_IMPORTED_MODULE_1__","MAT_INPUT_VALUE_ACCESSOR","_angular_core__WEBPACK_IMPORTED_MODULE_2__","MAT_INPUT_INVALID_TYPES","nextUniqueId","MatInput","ngControl","_parentForm","_parentFormGroup","_defaultErrorStateMatcher","inputValueAccessor","_autofillMonitor","ngZone","call","_uid","_isServer","focused","stateChanges","controlType","autofilled","_disabled","_required","_type","_readonly","_neverEmptyInputTypes","filter","t","_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_4__","has","_inputValueAccessor","nativeElement","_previousNativeValue","id","IOS","el","disabled","_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__","_id","_validateType","_isTextarea","type","ngOnInit","ngOnChanges","updateErrorState","_dirtyCheckNativeValue","focus","_focusChanged","isFocused","readonly","_onInput","newValue","indexOf","Error","_isNeverEmpty","_isBadInput","validity","badInput","nodeName","toLowerCase","empty","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","_angular_material_core__WEBPACK_IMPORTED_MODULE_5__","MatInputModule","RenderType_MatFormField","_angular_core__WEBPACK_IMPORTED_MODULE_0__","encapsulation","styles","data","animation","name","definitions","opacity","transform","offset","options","expr","timings","View_MatFormField_1","_l","_ck","_v","_co","component","_outlineGapStart","_outlineGapWidth","View_MatFormField_2","View_MatFormField_4","_control","View_MatFormField_5","View_MatFormField_6","View_MatFormField_3","_angular_common__WEBPACK_IMPORTED_MODULE_2__","ngSwitch","ngSwitchCase","ngIf","_hasLabel","hideRequiredMarker","required","_labelId","_shouldAlwaysFloat","color","View_MatFormField_7","View_MatFormField_8","View_MatFormField_9","_subscriptAnimationState","View_MatFormField_11","_hintLabelId","hintLabel","View_MatFormField_10","View_MatFormField_0","underlineRef","_connectionContainerRef","_inputContainerRef","_label","en","$event","ad","appearance","_prefixChildren","length","_hasFloatingLabel","_suffixChildren","_getDisplayedMessages","rxjs_operators__WEBPACK_IMPORTED_MODULE_9__","MatError","MatFormFieldControl","getMatFormFieldDuplicatedHintError","align","nextUniqueId$1","MatHint","MatLabel","MatPrefix","MatSuffix","nextUniqueId$2","_MatFormFieldMixinBase","_angular_material_core__WEBPACK_IMPORTED_MODULE_4__","MAT_FORM_FIELD_DEFAULT_OPTIONS","MatFormField","_changeDetectorRef","labelOptions","_dir","_defaultOptions","_animationMode","_showAlwaysAnimate","_hintLabel","_initialGapCalculated","_labelOptions","floatLabel","float","_animationsEnabled","tslib__WEBPACK_IMPORTED_MODULE_2__","_appearance","_hideRequiredMarker","_processHints","_floatLabel","markForCheck","getConnectedOverlayOrigin","ngAfterContentInit","_validateControlChild","rxjs_operators__WEBPACK_IMPORTED_MODULE_8__","_validatePlaceholders","_syncDescribedByIds","valueChanges","rxjs__WEBPACK_IMPORTED_MODULE_5__","changes","_hintChildren","_errorChildren","ngAfterContentChecked","Promise","resolve","then","updateOutlineGap","detectChanges","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_hideControlPlaceholder","errorState","_animateAndLockLabel","rxjs__WEBPACK_IMPORTED_MODULE_7__","_validateHints","startHint_1","endHint_1","hint","startHint","find","endHint","push","map","error","children","documentElement","containerStart","_getStartEnd","getBoundingClientRect","labelStart","labelWidth","_i","_a","offsetWidth","outlineGapPadding","rect","right","left","MatFormFieldModule"],"mappings":"qRAAAA,EAAAC,EAAA,QAoBqBC,IAAkBC,OAAAC,EAAA,EAAAD,KAAoCE,SAAS,GAMhFC,EAAiC,WACjC,SAAAA,EAAyBC,EAAWC,GAChCC,KAAKF,UAAYA,EACjBE,KAAKD,QAAUA,EACfC,KAAKC,mBAAqB,IAAIC,IAkGlC,OAtFAL,EAAgBM,UAAUC,QAK1B,SAAUC,GACN,IAAIC,EAAQN,KACZ,IAAKA,KAAKF,UAAUS,UAChB,OAAOC,EAAA,EAEX,IAAqBC,EAAOT,KAAKC,mBAAmBS,IAAIL,GACxD,GAAII,EACA,OAAOA,EAAKE,QAAQC,eAExB,IAAqBC,EAAS,IAAIC,EAAA,EACbC,EAAW,4BACXC,EAAW,SAAUC,GAIV,kCAAxBA,EAAMC,eACLb,EAAQc,UAAUC,SAASL,GAIC,gCAAxBE,EAAMC,eACXb,EAAQc,UAAUC,SAASL,KAC3BV,EAAQc,UAAUE,OAAON,GACzBT,EAAMP,QAAQuB,IAAI,WAAc,OAAOT,EAAOU,MAAOC,OAA0BP,EAAY,OAAGQ,cAAc,QAN5GpB,EAAQc,UAAUO,IAAIX,GACtBT,EAAMP,QAAQuB,IAAI,WAAc,OAAOT,EAAOU,MAAOC,OAA0BP,EAAY,OAAGQ,cAAc,QAkBpH,OAVAzB,KAAKD,QAAQ4B,kBAAkB,WAC3BtB,EAAQuB,iBAAiB,iBAAkBZ,EAAUvB,GACrDY,EAAQc,UAAUO,IAAI,uCAE1B1B,KAAKC,mBAAmB4B,IAAIxB,GACxBM,QAASE,EACTiB,SAAU,WACNzB,EAAQ0B,oBAAoB,iBAAkBf,EAAUvB,MAGzDoB,EAAOD,gBAWlBf,EAAgBM,UAAU6B,eAK1B,SAAU3B,GACN,IAAqBI,EAAOT,KAAKC,mBAAmBS,IAAIL,GACpDI,IACAA,EAAKqB,WACLrB,EAAKE,QAAQsB,WACb5B,EAAQc,UAAUE,OAAO,qCACzBhB,EAAQc,UAAUE,OAAO,6BACzBrB,KAAKC,mBAAmBiC,OAAO7B,KAMvCR,EAAgBM,UAAUgC,YAG1B,WACI,IAAI7B,EAAQN,KACZA,KAAKC,mBAAmBmC,QAAQ,SAAUC,EAAOhC,GAAW,OAAOC,EAAM0B,eAAe3B,MAUzER,EAAgByC,gBAAkB5C,OAAA6C,EAAA,EAAA7C,EAAmB8C,QAAS,WAAqC,OAAO,IAAI3C,EAAgBH,OAAA6C,EAAA,EAAA7C,CAAOC,EAAA,GAAWD,OAAA6C,EAAA,EAAA7C,CAAO6C,EAAA,KAAaE,MAAO5C,EAAiB6C,WAAY,SACpN7C,EAtGyB,GAgKhC8C,EAAqC,WACrC,SAAAA,EAA6BC,EAAa9C,EAAWC,GACjDC,KAAK4C,YAAcA,EACnB5C,KAAKF,UAAYA,EACjBE,KAAKD,QAAUA,EACfC,KAAK6C,WAAa,IAAI/B,EAAA,EACtBd,KAAK8C,UAAW,EAChB9C,KAAK+C,iBAAqC/C,KAAK4C,YAAyB,cAyT5E,OAvTAlD,OAAOsD,eAAeL,EAAoBxC,UAAW,WACjDO,IAIA,WAAc,OAAOV,KAAKiD,UAC1BpB,IAIA,SAAUqB,GACNlD,KAAKiD,SAAWC,EAChBlD,KAAKmD,iBAETC,YAAY,EACZC,cAAc,IAElB3D,OAAOsD,eAAeL,EAAoBxC,UAAW,WACjDO,IAIA,WAAc,OAAOV,KAAKsD,UAC1BzB,IAIA,SAAUqB,GACNlD,KAAKsD,SAAWJ,EAChBlD,KAAKuD,iBAETH,YAAY,EACZC,cAAc,IAElB3D,OAAOsD,eAAeL,EAAoBxC,UAAW,WACjDO,IAIA,WAAc,OAAOV,KAAK8C,UAC1BjB,IAIA,SAAUqB,GACNA,EAAQxD,OAAA8D,EAAA,EAAA9D,CAAsBwD,GAG1BlD,KAAK8C,WAAaI,KACjBlD,KAAK8C,SAAWI,GAASlD,KAAKyD,oBAAmB,GAAQzD,KAAK0D,UAGvEN,YAAY,EACZC,cAAc,IAOlBV,EAAoBxC,UAAUgD,cAI9B,WACI,IAAqBQ,EAAY3D,KAAK4D,SAAW5D,KAAK6D,kBAClD7D,KAAK4D,QAAU5D,KAAK6D,kBAAoB,KAAO,KAC/CF,GACA3D,KAAK8D,kBAAkB,YAAaH,IAQ5ChB,EAAoBxC,UAAUoD,cAI9B,WACI,IAAqBQ,EAAY/D,KAAKgE,SAAWhE,KAAK6D,kBAClD7D,KAAKgE,QAAUhE,KAAK6D,kBAAoB,KAAO,KAC/CE,GACA/D,KAAK8D,kBAAkB,YAAaC,IAM5CpB,EAAoBxC,UAAU8D,gBAG9B,WACI,IAAI3D,EAAQN,KACRA,KAAKF,UAAUS,YAEfP,KAAKkE,eAAiBlE,KAAK+C,iBAAiBoB,MAAMC,OAClDpE,KAAKyD,qBACLzD,KAAKD,QAAQ4B,kBAAkB,WAC3BjC,OAAA2E,EAAA,EAAA3E,CAAU4E,OAAQ,UACbC,KAAK7E,OAAA8E,EAAA,EAAA9E,CAAU,IAAKA,OAAAH,EAAA,EAAAG,CAAUY,EAAMuC,aACpC4B,UAAU,WAAc,OAAOnE,EAAMmD,oBAAmB,SAOzEd,EAAoBxC,UAAUgC,YAG9B,WACInC,KAAK6C,WAAWtB,OAChBvB,KAAK6C,WAAWZ,YAQpBU,EAAoBxC,UAAU2D,kBAM9B,SAAUY,EAAUxB,GAChBlD,KAAK+C,iBAAiBoB,MAAMO,GAAYxB,GAU5CP,EAAoBxC,UAAUwE,yBAQ9B,WACI,IAAI3E,KAAK6D,kBAAT,CAIA,IAAqBe,EAAkC5E,KAAK+C,iBAAiB8B,WAAU,GACvFD,EAAcE,KAAO,EAIrBF,EAAcT,MAAMY,SAAW,WAC/BH,EAAcT,MAAMa,WAAa,SACjCJ,EAAcT,MAAMc,OAAS,OAC7BL,EAAcT,MAAMe,QAAU,IAC9BN,EAAcT,MAAMC,OAAS,GAC7BQ,EAAcT,MAAMR,UAAY,GAChCiB,EAAcT,MAAMJ,UAAY,GAMhCa,EAAcT,MAAMgB,SAAW,SAC7BnF,KAAK+C,iBAA4B,WAAEqC,YAAYR,GACjD5E,KAAK6D,kBAAoBe,EAAcS,aACrCrF,KAAK+C,iBAA4B,WAAEuC,YAAYV,GAEjD5E,KAAKmD,gBACLnD,KAAKuD,kBAKTZ,EAAoBxC,UAAUoF,UAG9B,WACQvF,KAAKF,UAAUS,WACfP,KAAKyD,sBAcbd,EAAoBxC,UAAUsD,mBAM9B,SAAU+B,GACN,IAAIlF,EAAQN,KAGZ,QAFc,IAAVwF,IAAoBA,GAAQ,GAE3BxF,KAAK8C,WAGV9C,KAAK2E,2BAGA3E,KAAK6D,mBAAV,CAGA,IAAqB4B,EAA6BzF,KAAK4C,YAAyB,cAC3DM,EAAQuC,EAASvC,MAEtC,GAAIA,IAAUlD,KAAK0F,gBAAmBF,EAAtC,CAGA,IAAqBG,EAAkBF,EAASG,YAMhDH,EAAStE,UAAUO,IAAI,mCACvB+D,EAASG,YAAc,GAKvBH,EAAStB,MAAMC,OAFeqB,EAASI,aAAe,EAErB,KACjCJ,EAAStE,UAAUE,OAAO,mCAC1BoE,EAASG,YAAcD,EAGc,oBAA1BG,uBACP9F,KAAKD,QAAQ4B,kBAAkB,WAC3B,OAAOmE,sBAAsB,WAQpBxF,EAAMuC,WAAWkD,WAAaC,SAASC,gBAAkBR,GAC1DA,EAASS,kBARQT,EAASU,eAA+BV,EAASW,kBAalFpG,KAAK0F,eAAiBxC,KAS1BP,EAAoBxC,UAAUuD,MAI9B,gBAGgC2C,IAAxBrG,KAAKkE,iBAGTlE,KAAK+C,iBAAiBoB,MAAMC,OAASpE,KAAKkE,iBAK9CvB,EAAoBxC,UAAUmG,kBAG9B,aA2BO3D,EAhU6B,GAuUpC4D,EACA,4PClgBJC,EAAAhH,EAAA,QA2BIiH,EAAqC,SAAUC,GAE/C,SAAAD,IACI,OAAkB,OAAXC,GAAmBA,EAAOC,MAAM3G,KAAM4G,YAAc5G,KA2E/D,OA7EAN,OAAAmH,EAAA,EAAAnH,CAAU+G,EAAqBC,GAI/BhH,OAAOsD,eAAeyD,EAAoBtG,UAAW,sBACjDO,IAGA,WAAc,OAAOV,KAAK4D,SAC1B/B,IAIA,SAAUqB,GAASlD,KAAK4D,QAAUV,GAClCE,YAAY,EACZC,cAAc,IAElB3D,OAAOsD,eAAeyD,EAAoBtG,UAAW,sBACjDO,IAGA,WAAc,OAAOV,KAAKgE,SAC1BnC,IAIA,SAAUqB,GAASlD,KAAKgE,QAAUd,GAClCE,YAAY,EACZC,cAAc,IAElB3D,OAAOsD,eAAeyD,EAAoBtG,UAAW,eACjDO,IAGA,WAAc,OAAOV,KAAK8G,SAC1BjF,IAIA,SAAUqB,GAASlD,KAAK8G,QAAU5D,GAClCE,YAAY,EACZC,cAAc,IAElB3D,OAAOsD,eAAeyD,EAAoBtG,UAAW,uBACjDO,IAGA,WAAc,OAAOV,KAAK8G,SAC1BjF,IAIA,SAAUqB,GAASlD,KAAK8G,QAAU5D,GAClCE,YAAY,EACZC,cAAc,IAuBXoD,EA9E6B,CA+EtCM,EAAA,GA0BmBC,EAA2B,IAAIC,EAAA,EAAe,4BAO9CC,GACjB,SACA,WACA,OACA,SACA,QACA,QACA,QACA,QACA,UAEiBC,EAAe,EAoBhCC,EAA0B,SAAUV,GAEpC,SAAAU,EAAkBxE,EAAa9C,EAC/BuH,EAAWC,EAAaC,EAAkBC,EAA2BC,EAAoBC,EAAkBC,GACvG,IAAIrH,EAAQoG,EAAOkB,KAAK5H,KAAMwH,EAA2BF,EAAaC,EAAkBF,IAAcrH,KAsEtG,OArEAM,EAAMsC,YAAcA,EACpBtC,EAAMR,UAAYA,EAClBQ,EAAM+G,UAAYA,EAClB/G,EAAMoH,iBAAmBA,EACzBpH,EAAMuH,KAAO,aAAeV,IAI5B7G,EAAMwH,WAAY,EAKlBxH,EAAMyH,SAAU,EAKhBzH,EAAM0H,aAAe,IAAIxB,EAAA,EAKzBlG,EAAM2H,YAAc,YAKpB3H,EAAM4H,YAAa,EACnB5H,EAAM6H,WAAY,EAClB7H,EAAM8H,WAAY,EAClB9H,EAAM+H,MAAQ,OACd/H,EAAMgI,WAAY,EAClBhI,EAAMiI,uBACF,OACA,WACA,iBACA,QACA,OACA,QACFC,OAAO,SAAUC,GAAK,OAAO/I,OAAAgJ,EAAA,EAAAhJ,GAAyBiJ,IAAIF,KAK5DnI,EAAMsI,oBAAsBnB,GAAsBnH,EAAMsC,YAAYiG,cACpEvI,EAAMwI,qBAAuBxI,EAAM4C,MAGnC5C,EAAMyI,GAAKzI,EAAMyI,GAIbjJ,EAAUkJ,KACVrB,EAAOhG,kBAAkB,WACrBiB,EAAYiG,cAAcjH,iBAAiB,QAAS,SAAUX,GAC1D,IAAqBgI,EAAuBhI,EAAY,OACnDgI,EAAG/F,OAAU+F,EAAG9C,gBAAmB8C,EAAG7C,eAKvC6C,EAAG/C,kBAAkB,EAAG,GACxB+C,EAAG/C,kBAAkB,EAAG,QAKxC5F,EAAMwH,WAAaxH,EAAMR,UAAUS,UAC5BD,EAqYX,OA9cAZ,OAAAmH,EAAA,EAAAnH,CAAU0H,EAAUV,GA2EpBhH,OAAOsD,eAAeoE,EAASjH,UAAW,YACtCO,IAKA,WACI,OAAIV,KAAKqH,WAAyC,OAA5BrH,KAAKqH,UAAU6B,SAC1BlJ,KAAKqH,UAAU6B,SAEnBlJ,KAAKmI,WAEhBtG,IAIA,SAAUqB,GACNlD,KAAKmI,UAAYzI,OAAAyJ,EAAA,EAAAzJ,CAAsBwD,GAGnClD,KAAK+H,UACL/H,KAAK+H,SAAU,EACf/H,KAAKgI,aAAazG,SAG1B6B,YAAY,EACZC,cAAc,IAElB3D,OAAOsD,eAAeoE,EAASjH,UAAW,MACtCO,IAKA,WAAc,OAAOV,KAAKoJ,KAC1BvH,IAIA,SAAUqB,GAASlD,KAAKoJ,IAAMlG,GAASlD,KAAK6H,MAC5CzE,YAAY,EACZC,cAAc,IAElB3D,OAAOsD,eAAeoE,EAASjH,UAAW,YACtCO,IAKA,WAAc,OAAOV,KAAKoI,WAC1BvG,IAIA,SAAUqB,GAASlD,KAAKoI,UAAY1I,OAAAyJ,EAAA,EAAAzJ,CAAsBwD,IAC1DE,YAAY,EACZC,cAAc,IAElB3D,OAAOsD,eAAeoE,EAASjH,UAAW,QACtCO,IAIA,WAAc,OAAOV,KAAKqI,OAC1BxG,IAIA,SAAUqB,GACNlD,KAAKqI,MAAQnF,GAAS,OACtBlD,KAAKqJ,iBAIArJ,KAAKsJ,eAAiB5J,OAAAgJ,EAAA,EAAAhJ,GAAyBiJ,IAAI3I,KAAKqI,SACzDrI,KAAK4C,YAAYiG,cAAcU,KAAOvJ,KAAKqI,QAGnDjF,YAAY,EACZC,cAAc,IAElB3D,OAAOsD,eAAeoE,EAASjH,UAAW,SACtCO,IAKA,WAAc,OAAOV,KAAK4I,oBAAoB1F,OAC9CrB,IAIA,SAAUqB,GACFA,IAAUlD,KAAKkD,QACflD,KAAK4I,oBAAoB1F,MAAQA,EACjClD,KAAKgI,aAAazG,SAG1B6B,YAAY,EACZC,cAAc,IAElB3D,OAAOsD,eAAeoE,EAASjH,UAAW,YACtCO,IAIA,WAAc,OAAOV,KAAKsI,WAC1BzG,IAIA,SAAUqB,GAASlD,KAAKsI,UAAY5I,OAAAyJ,EAAA,EAAAzJ,CAAsBwD,IAC1DE,YAAY,EACZC,cAAc,IAKlB+D,EAASjH,UAAUqJ,SAGnB,WACI,IAAIlJ,EAAQN,KACZA,KAAK0H,iBAAiBtH,QAAQJ,KAAK4C,YAAYiG,eAAepE,UAAU,SAAUxD,GAC9EX,EAAM4H,WAAajH,EAAMQ,aACzBnB,EAAM0H,aAAazG,UAM3B6F,EAASjH,UAAUsJ,YAGnB,WACIzJ,KAAKgI,aAAazG,QAKtB6F,EAASjH,UAAUgC,YAGnB,WACInC,KAAKgI,aAAa/F,WAClBjC,KAAK0H,iBAAiB1F,eAAehC,KAAK4C,YAAYiG,gBAK1DzB,EAASjH,UAAUoF,UAGnB,WACQvF,KAAKqH,WAILrH,KAAK0J,mBAKT1J,KAAK2J,0BAOTvC,EAASjH,UAAUyJ,MAInB,WAAc5J,KAAK4C,YAAYiG,cAAce,SAO7CxC,EAASjH,UAAU0J,cAKnB,SAAUC,GACFA,IAAc9J,KAAK+H,SAAY/H,KAAK+J,WACpC/J,KAAK+H,QAAU+B,EACf9J,KAAKgI,aAAazG,SAM1B6F,EAASjH,UAAU6J,SAGnB,aAcA5C,EAASjH,UAAUwJ,uBAInB,WACI,IAAqBM,EAAWjK,KAAKkD,MACjClD,KAAK8I,uBAAyBmB,IAC9BjK,KAAK8I,qBAAuBmB,EAC5BjK,KAAKgI,aAAazG,SAQ1B6F,EAASjH,UAAUkJ,cAInB,WACI,GAAInC,EAAwBgD,QAAQlK,KAAKqI,QAAU,EAC/C,MAzWD8B,MAAM,eAyWiCnK,KAAKqI,MAzWb,oCAiXtCjB,EAASjH,UAAUiK,cAInB,WACI,OAAOpK,KAAKuI,sBAAsB2B,QAAQlK,KAAKqI,QAAU,GAO7DjB,EAASjH,UAAUkK,YAInB,WAEI,IAAqBC,EAA8BtK,KAAK4C,YAA0B,cAAE0H,SACpF,OAAOA,GAAYA,EAASC,UAOhCnD,EAASjH,UAAUmJ,YAInB,WACI,MAAiE,aAA1DtJ,KAAK4C,YAAYiG,cAAc2B,SAASC,eAEnD/K,OAAOsD,eAAeoE,EAASjH,UAAW,SAKtCO,IAKA,WACI,QAAQV,KAAKoK,iBAAoBpK,KAAK4C,YAAYiG,cAAc3F,OAAUlD,KAAKqK,eAC1ErK,KAAKkI,aAEd9E,YAAY,EACZC,cAAc,IAElB3D,OAAOsD,eAAeoE,EAASjH,UAAW,oBAKtCO,IAKA,WAAc,OAAOV,KAAK+H,UAAY/H,KAAK0K,OAC3CtH,YAAY,EACZC,cAAc,IAYlB+D,EAASjH,UAAUwK,kBAMnB,SAAUC,GAAO5K,KAAK6K,iBAAmBD,EAAIE,KAAK,MAUlD1D,EAASjH,UAAU4K,iBAKnB,WAAc/K,KAAK4J,SAkDZxC,EA/ckB,CAJa1H,OAAAsL,EAAA,EAAAtL,CARtC,SAAsB8H,EAA2BF,EAAaC,EAAkBF,GAC5ErH,KAAKwH,0BAA4BA,EACjCxH,KAAKsH,YAAcA,EACnBtH,KAAKuH,iBAAmBA,EACxBvH,KAAKqH,UAAYA,KA8drB4D,EACA,wJCjnBAC,iCAhBJ1L,EAAA,QAgB8B2L,EAAA,IAAUC,cAAe,EAAGC,QAD/B,k+FAAm+F,ohCAAqhC,+6CAAg7C,onGAAqnG,0rCAA2rC,smEAC5pTC,MAAQC,YAAgBhC,KAAM,EAAGiC,KAAM,qBAAsBC,cAAgBlC,KAAM,EAAGiC,KAAM,QAASH,QAAU9B,KAAM,EAAG8B,QAAUK,QAAS,EAAGC,UAAW,kBAAoBC,OAAQ,MAAQC,aAASxF,IAAekD,KAAM,EAAGuC,KAAM,gBAAiBP,YAAchC,KAAM,EAAG8B,QAAUK,QAAS,EAAGC,UAAW,qBAAuBC,OAAQ,OAAUrC,KAAM,EAAG8B,OAAQ,KAAMU,QAAS,2CAA6CF,QAAS,OAASA,iBAE5gB,SAAAG,EAA6BC,GAAM,OAAOd,EAAA,GAAQ,IClBiHc,MAAAd,EAAA,yDAA8Cc,MAAAd,EAAA,0FAAoCc,MAAAd,EAAA,8GAAoFc,MAAAd,EAAA,4GAAkFc,MAAAd,EAAA,8FAAoDc,MAAAd,EAAA,uHAAiEc,MAAAd,EAAA,8GAAoFc,MAAAd,EAAA,4GAAkFc,MAAAd,EAAA,8FAAwC,cAAAe,EAAAC,GAAA,IAAAC,EAAAD,EAAAE,UAAzeH,EAAAC,EAAA,IAA0CC,EAAmCE,kBAAOJ,EAAAC,EAAA,IAAwCC,EAAmCG,kBAA4HL,EAAAC,EAAA,IAA0CC,EAAmCE,kBAAOJ,EAAAC,EAAA,IAAwCC,EAAmCG,oBDmB/qB,SAAAC,EAA6BP,GAAM,OAAOd,EAAA,GAAQ,ICnBusBc,MAAAd,EAAA,wFAAkEA,EAAA,YAAiC,WDoB51B,SAAAsB,EAA6BR,GAAM,OAAOd,EAAA,GAAQ,ICpBoyCc,MAAAd,EAAA,wDAAoCA,EAAA,YAAkDc,MAAAd,EAAA,mCAAAe,EAAAC,GAAAD,EAAAC,EAAA,IAAAA,EAAAE,UAAAK,SAAA9G,eDqB56C,SAAA+G,EAA6BV,GAAM,OAAOd,EAAA,GAAQ,GCrBi6CA,EAAA,YAAoDc,MAAAd,EAAA,+BDsBvgD,SAAAyB,EAA6BX,GAAM,OAAOd,EAAA,GAAQ,ICtBk+Cc,MAAAd,EAAA,mJAAgKc,MAAAd,EAAA,wBAAO,WDuB3rD,SAAA0B,EAA6BZ,GAAM,OAAOd,EAAA,GAAQ,ICvBm7Bc,MAAAd,EAAA,6OAAAA,EAAA,kBAAA2B,EAAA,MAAAC,UAAA,sBAAiXd,MAAAd,EAAA,6BAAAsB,IAAAtB,EAAA,mBAAA2B,EAAA,GAAA3B,EAAA,EAAAA,EAAA,EAAA2B,EAAA,IAAAE,cAAA,0BAA6Hf,MAAAd,EAAA,6BAAAwB,IAAAxB,EAAA,mBAAA2B,EAAA,GAAA3B,EAAA,EAAAA,EAAA,EAAA2B,EAAA,IAAAE,cAAA,0BAAiEf,MAAAd,EAAA,6BAAAyB,IAAAzB,EAAA,kBAAA2B,EAAA,GAAA3B,EAAA,EAAAA,EAAA,IAAA8B,MAAA,kBAAgK,SAAAf,EAAAC,GAAA,IAAAC,EAAAD,EAAAE,UAA/sBH,EAAAC,EAAA,IAAwVC,EAAwBc,aAAChB,EAAAC,EAAA,KAAc,GAA+GD,EAAAC,EAAA,KAA+B,GAAkCD,EAAAC,EAAA,KAAyFC,EAAAe,oBAAAf,EAAAM,SAAAU,WAAAhB,EAAsEM,SAAAxD,WAAA,SAAAgD,EAAAC,GAAA,IAAAC,EAAAD,EAAAE,UAA9sBH,EAAAC,EAAA,IAAoCC,EAAeiB,SAACjB,EAAwBM,SAAA3D,GAACqD,EAA8BM,SAAA3D,GAACqD,EAAAM,SAAAhC,QAAA0B,EAAyDkB,mBAAClB,EAAAM,SAAAhC,QAAA0B,EAAoEkB,mBAAC,UAAAlB,EAAAmB,MAAuC,QAAAnB,EAAAmB,SDwBvvC,SAAAC,EAA6BvB,GAAM,OAAOd,EAAA,GAAQ,ICxBqqDc,MAAAd,EAAA,wFAAkEA,EAAA,YAAiC,WDyB1zD,SAAAsC,EAA6BxB,GAAM,OAAOd,EAAA,GAAQ,ICzBiyDc,MAAAd,EAAA,+GAAiFc,MAAAd,EAAA,iIAA8G,cAAAe,EAAAC,GAAA,IAAAC,EAAAD,EAAAE,UAA9GH,EAAAC,EAAA,IAAoC,UAAAC,EAAAmB,MAAuC,QAAAnB,EAAAmB,SD0B/+D,SAAAG,EAA6BzB,GAAM,OAAOd,EAAA,GAAQ,IC1BgkEc,MAAAd,EAAA,iFAA8EA,EAAA,YAA+B,cAAAe,EAAAC,GAA7GD,EAAAC,EAAA,IAA6GA,EAAAE,UAAhCsB,4BD2B/rE,SAAAC,EAA8B3B,GAAM,OAAOd,EAAA,GAAQ,IC3BgzEc,MAAAd,EAAA,oFAA4Dc,MAAAd,EAAA,qBAAa,cAAAe,EAAAC,GAAA,IAAAC,EAAAD,EAAAE,UAAzEH,EAAAC,EAAA,IAAuBC,EAAmByB,cAAkB3B,EAAAC,EAAA,IAAAC,EAAA0B,aD4B/5E,SAAAC,EAA8B9B,GAAM,OAAOd,EAAA,GAAQ,IC5B+rEc,MAAAd,EAAA,yHAAiHc,MAAAd,EAAA,6BAAAyC,IAAAzC,EAAA,kBAAA2B,EAAA,GAAA3B,EAAA,EAAAA,EAAA,IAAA8B,MAAA,iBAA+E9B,EAAA,YAA8Dc,MAAAd,EAAA,6FAA8CA,EAAA,YAA2C,SAAAe,EAAAC,GAAtOD,EAAAC,EAAA,IAAsOA,EAAAE,UAAhNyB,YAAA,SAAA5B,EAAAC,GAAvID,EAAAC,EAAA,IAAuIA,EAAAE,UAAvBsB,4BD6B51E,SAAAK,EAA8B/B,GAAM,OAAOd,EAAA,GAAQ,GAAIA,EAAA,GAAQ,UAAW,GAAK8C,aAAc,IAAM9C,EAAA,GAAQ,UAAW,GAAK+C,wBAAyB,IAAM/C,EAAA,GAAQ,UAAW,GAAKgD,mBAAoB,IAAMhD,EAAA,GAAQ,UAAW,GAAKiD,OAAQ,KC7BlPnC,MAAAd,EAAA,2FAAoCc,MAAAd,EAAA,wHAAAgB,EAAAkC,EAAAC,GAAA,IAAAC,GAAA,EAAAnC,EAAAD,EAA+HE,UAA/H,MAAsD,UAAAgC,ID+BlFE,GADyF,KAA5EnC,EAAIM,SAAS3B,kBAAoBqB,EAAIM,SAAS3B,iBAAiBuD,KAC9DC,GC/BcA,GAAA,aAA+HtC,MAAAd,EAAA,6BAAAa,IAAAb,EAAA,kBAAA2B,EAAA,GAAA3B,EAAA,EAAAA,EAAA,IAAA8B,MAAA,kBAAslBhB,MAAAd,EAAA,6BAAAqB,IAAArB,EAAA,kBAAA2B,EAAA,GAAA3B,EAAA,EAAAA,EAAA,IAAA8B,MAAA,kBAAsHhB,MAAAd,EAAA,gHAAkDA,EAAA,YAAyBc,MAAAd,EAAA,kGAA2Cc,MAAAd,EAAA,6BAAA0B,IAAA1B,EAAA,mBAAA2B,EAAA,GAAA3B,EAAA,EAAAA,EAAA,IAAA8B,MAAA,kBAAkvBhB,MAAAd,EAAA,6BAAAqC,IAAArC,EAAA,mBAAA2B,EAAA,GAAA3B,EAAA,EAAAA,EAAA,IAAA8B,MAAA,kBAA4HhB,MAAAd,EAAA,6BAAAsC,IAAAtC,EAAA,mBAAA2B,EAAA,GAAA3B,EAAA,EAAAA,EAAA,IAAA8B,MAAA,kBAA4MhB,MAAAd,EAAA,oGAAAA,EAAA,mBAAA2B,EAAA,MAAAC,UAAA,sBAAmFd,MAAAd,EAAA,6BAAAuC,IAAAvC,EAAA,oBAAA2B,EAAA,GAAA3B,EAAA,EAAAA,EAAA,EAAA2B,EAAA,IAAAE,cAAA,0BAAgIf,MAAAd,EAAA,6BAAA4C,IAAA5C,EAAA,oBAAA2B,EAAA,GAAA3B,EAAA,EAAAA,EAAA,EAAA2B,EAAA,IAAAE,cAAA,0BAAiH,SAAAd,EAAAC,GAAA,IAAAC,EAAAD,EAAAE,UAAhsEH,EAAAC,EAAA,IAAc,WAAAC,EAAAoC,YAAwkBtC,EAAAC,EAAA,IAAmCC,EAA8BqC,gBAAAC,QAA2KxC,EAAAC,EAAA,KAA4TC,EAA2BuC,qBAA2ZzC,EAAAC,EAAA,KAAmCC,EAA8BwC,gBAAAF,QAA2DxC,EAAAC,EAAA,KAAiD,WAAAC,EAAAoC,YAA2JtC,EAAAC,EAAA,KAA8CC,EAAoCyC,yBAAC3C,EAAAC,EAAA,KAAK,SAA2HD,EAAAC,EAAA,KAAyC,SAAsB,0bCAjzE2C,EAAAtP,EAAA,QAuBqB2H,EAAe,EAIhC4H,EAA0B,WAkB1B,OAjBA,WACI/O,KAAK+I,GAAK,aAAe5B,KAFJ,GAuD7B6H,EACI,aAsBJ,SAAAC,EAA4CC,GACxC,OAAO/E,MAAM,4CAA8C+E,EAAQ,QAcvE,IAAqBC,EAAiB,EAIlCC,EAAyB,WA4BzB,OA3BA,WAIIpP,KAAKkP,MAAQ,QAIblP,KAAK+I,GAAK,YAAcoG,KATJ,GAsCxBE,EACA,aAsCAC,EACA,aAiBAC,EACA,aAciBC,EAAiB,EAqBjBC,EAAyB/P,OAAAgQ,EAAA,EAAAhQ,CAT1C,SAA0BkD,GACtB5C,KAAK4C,YAAcA,GAQgD,WAKtD+M,EAAiC,IAAIxE,EAAA,EAAe,kCAIrEyE,EAA8B,SAAUlJ,GAExC,SAAAkJ,EAAsBhN,EAAaiN,EAAoBC,EAAcC,EAAMC,EAAiBlQ,EAAWC,EAASkQ,GAC5G,IAAI3P,EAAQoG,EAAOkB,KAAK5H,KAAM4C,IAAgB5C,KA0B9C,OAzBAM,EAAMsC,YAAcA,EACpBtC,EAAMuP,mBAAqBA,EAC3BvP,EAAMyP,KAAOA,EACbzP,EAAM0P,gBAAkBA,EACxB1P,EAAMR,UAAYA,EAClBQ,EAAMP,QAAUA,EAIhBO,EAAM4P,oBAAqB,EAI3B5P,EAAMqN,yBAA2B,GACjCrN,EAAM6P,WAAa,GAEnB7P,EAAMuN,aAAe,YAAc2B,IAEnClP,EAAM+M,SAAW,wBAA0BmC,IAC3ClP,EAAMiM,iBAAmB,EACzBjM,EAAMgM,iBAAmB,EACzBhM,EAAM8P,uBAAwB,EAC9B9P,EAAM+P,cAAgBP,MACtBxP,EAAMgQ,WAAahQ,EAAM+P,cAAcE,OAAS,OAChDjQ,EAAMkQ,mBAAwC,mBAAnBP,EACpB3P,EAqgBX,OAjiBAZ,OAAA+Q,EAAA,EAAA/Q,CAAUkQ,EAAclJ,GA8BxBhH,OAAOsD,eAAe4M,EAAazP,UAAW,cAC1CO,IAIA,WACI,OAAOV,KAAK0Q,aAAe1Q,KAAKgQ,iBAAmBhQ,KAAKgQ,gBAAgBxB,YAAc,UAE1F3M,IAIA,SAAUqB,GAEFA,IAAUlD,KAAK0Q,aAAyB,YAAVxN,IAC9BlD,KAAKoQ,uBAAwB,GAEjCpQ,KAAK0Q,YAAcxN,GAEvBE,YAAY,EACZC,cAAc,IAElB3D,OAAOsD,eAAe4M,EAAazP,UAAW,sBAC1CO,IAIA,WAAc,OAAOV,KAAK2Q,qBAC1B9O,IAIA,SAAUqB,GACNlD,KAAK2Q,oBAAsBjR,OAAAyJ,EAAA,EAAAzJ,CAAsBwD,IAErDE,YAAY,EACZC,cAAc,IAElB3D,OAAOsD,eAAe4M,EAAazP,UAAW,sBAE1CO,IAIA,WACI,MAA2B,WAApBV,KAAKsQ,aAA4BtQ,KAAKkQ,oBAEjD9M,YAAY,EACZC,cAAc,IAElB3D,OAAOsD,eAAe4M,EAAazP,UAAW,kBAE1CO,IAIA,WAAc,MAA2B,UAApBV,KAAKsQ,YAC1BlN,YAAY,EACZC,cAAc,IAElB3D,OAAOsD,eAAe4M,EAAazP,UAAW,aAC1CO,IAIA,WAAc,OAAOV,KAAKmQ,YAC1BtO,IAIA,SAAUqB,GACNlD,KAAKmQ,WAAajN,EAClBlD,KAAK4Q,iBAETxN,YAAY,EACZC,cAAc,IAElB3D,OAAOsD,eAAe4M,EAAazP,UAAW,cAC1CO,IASA,WACI,MAA2B,WAApBV,KAAKwO,YAAgD,UAArBxO,KAAK6Q,YAA0B,OAAS7Q,KAAK6Q,aAExFhP,IAIA,SAAUqB,GACFA,IAAUlD,KAAK6Q,cACf7Q,KAAK6Q,YAAc3N,GAASlD,KAAKqQ,cAAcE,OAAS,OACxDvQ,KAAK6P,mBAAmBiB,iBAGhC1N,YAAY,EACZC,cAAc,IAWlBuM,EAAazP,UAAU4Q,0BAKvB,WACI,OAAO/Q,KAAKkO,yBAA2BlO,KAAK4C,aAKhDgN,EAAazP,UAAU6Q,mBAGvB,WACI,IAAI1Q,EAAQN,KACZA,KAAKiR,wBACDjR,KAAK0M,SAASzE,aACdjI,KAAK4C,YAAYiG,cAAc1H,UAC1BO,IAAI,uBAAyB1B,KAAK0M,SAASzE,aAGpDjI,KAAK0M,SAAS1E,aAAazD,KAAK7E,OAAAwR,EAAA,EAAAxR,CAA2B,OAAW+E,UAAU,WAC5EnE,EAAM6Q,wBACN7Q,EAAM8Q,sBACN9Q,EAAMuP,mBAAmBiB,iBAG7B,IAAqBO,EAAerR,KAAK0M,SAASrF,WAAarH,KAAK0M,SAASrF,UAAUgK,cAAgBC,EAAA,EACvG5R,OAAA8G,EAAA,EAAA9G,CAAM2R,EAAcrR,KAAKyO,gBAAgB8C,QAASvR,KAAK4O,gBAAgB2C,SAClE9M,UAAU,WAAc,OAAOnE,EAAMuP,mBAAmBiB,iBAE7D9Q,KAAKwR,cAAcD,QAAQhN,KAAK7E,OAAAwR,EAAA,EAAAxR,CAAU,OAAO+E,UAAU,WACvDnE,EAAMsQ,gBACNtQ,EAAMuP,mBAAmBiB,iBAG7B9Q,KAAKyR,eAAeF,QAAQhN,KAAK7E,OAAAwR,EAAA,EAAAxR,CAAU,OAAO+E,UAAU,WACxDnE,EAAM8Q,sBACN9Q,EAAMuP,mBAAmBiB,kBAMjClB,EAAazP,UAAUuR,sBAGvB,WACI,IAAIpR,EAAQN,KACZA,KAAKiR,wBACAjR,KAAKoQ,wBAEFpQ,KAAKD,QAILC,KAAKD,QAAQ4B,kBAAkB,WAC3BgQ,QAAQC,UAAUC,KAAK,WAAc,OAAOvR,EAAMwR,uBAItDH,QAAQC,UAAUC,KAAK,WAAc,OAAOvR,EAAMwR,uBAO9DlC,EAAazP,UAAU8D,gBAGvB,WAEIjE,KAAK2N,yBAA2B,QAChC3N,KAAK6P,mBAAmBkC,iBAQ5BnC,EAAazP,UAAU6R,eAKvB,SAAUC,GACN,IAAqB5K,EAAYrH,KAAK0M,SAAW1M,KAAK0M,SAASrF,UAAY,KAC3E,OAAOA,GAAaA,EAAU4K,IAKlCrC,EAAazP,UAAU+R,gBAGvB,WACI,SAAUlS,KAAK0M,UAAY1M,KAAK0M,SAAS9G,aAAe5F,KAAKmS,oBAKjEvC,EAAazP,UAAU+M,UAGvB,WACI,QAASlN,KAAKoS,aAKlBxC,EAAazP,UAAUkS,kBAGvB,WACI,OAAOrS,KAAKsS,iBAAmBtS,KAAK0M,SAAS6F,kBAAoBvS,KAAKsN,qBAK1EsC,EAAazP,UAAUqS,wBAGvB,WAEI,MAA2B,WAApBxS,KAAKwO,aAA4BxO,KAAKkN,aACzClN,KAAKkN,cAAgBlN,KAAKqS,qBAKlCzC,EAAazP,UAAUwO,kBAGvB,WAEI,OAAO3O,KAAKkN,aAAmC,WAApBlN,KAAKwO,YAA2BxO,KAAKkS,mBAOpEtC,EAAazP,UAAU0O,sBAIvB,WACI,OAAQ7O,KAAKyR,gBAAkBzR,KAAKyR,eAAe/C,OAAS,GACxD1O,KAAK0M,SAAS+F,WAAc,QAAU,QAO9C7C,EAAazP,UAAUuS,qBAIvB,WACI,IAAIpS,EAAQN,KACRA,KAAK2O,qBAAuB3O,KAAKsS,iBAG7BtS,KAAKwQ,qBACLxQ,KAAKkQ,oBAAqB,EAC1BxQ,OAAAiT,EAAA,EAAAjT,CAAUM,KAAKoO,OAAOvF,cAAe,iBAAiBtE,KAAK7E,OAAAoP,EAAA,EAAApP,CAAK,IAAI+E,UAAU,WAC1EnE,EAAM4P,oBAAqB,KAGnClQ,KAAKsQ,WAAa,SAClBtQ,KAAK6P,mBAAmBiB,iBAQhClB,EAAazP,UAAUgR,sBAKvB,WACI,GAAInR,KAAK0M,SAAS9G,aAAe5F,KAAKmS,kBAClC,MAlfDhI,MAAM,iEAyfbyF,EAAazP,UAAUyQ,cAIvB,WACI5Q,KAAK4S,iBACL5S,KAAKoR,uBAOTxB,EAAazP,UAAUyS,eAKvB,WACI,IAEyBC,EACAC,EAHrBxS,EAAQN,KACRA,KAAKwR,eAGLxR,KAAKwR,cAAcpP,QAAQ,SAAU2Q,GACjC,GAAmB,UAAfA,EAAK7D,MAAmB,CACxB,GAAI2D,GAAevS,EAAMwN,UACrB,MAAMmB,EAAmC,SAE7C4D,EAAcE,OAEb,GAAmB,QAAfA,EAAK7D,MAAiB,CAC3B,GAAI4D,EACA,MAAM7D,EAAmC,OAE7C6D,EAAYC,MAU5BnD,EAAazP,UAAUiR,oBAKvB,WACI,GAAIpR,KAAK0M,SAAU,CACf,IAAqB9B,KACrB,GAAqC,SAAjC5K,KAAK6O,wBAAoC,CACzC,IAAqBmE,EAAYhT,KAAKwR,cAClCxR,KAAKwR,cAAcyB,KAAK,SAAUF,GAAQ,MAAsB,UAAfA,EAAK7D,QAAwB,KAC7DgE,EAAUlT,KAAKwR,cAChCxR,KAAKwR,cAAcyB,KAAK,SAAUF,GAAQ,MAAsB,QAAfA,EAAK7D,QAAsB,KAC5E8D,EACApI,EAAIuI,KAAKH,EAAUjK,IAEd/I,KAAKmQ,YACVvF,EAAIuI,KAAKnT,KAAK6N,cAEdqF,GACAtI,EAAIuI,KAAKD,EAAQnK,SAGhB/I,KAAKyR,iBACV7G,EAAM5K,KAAKyR,eAAe2B,IAAI,SAAUC,GAAS,OAAOA,EAAMtK,MAElE/I,KAAK0M,SAAS/B,kBAAkBC,KAQxCgF,EAAazP,UAAU8Q,sBAIvB,WACI,IAAKjR,KAAK0M,SACN,MA9jBDvC,MAAM,uDA0kBbyF,EAAazP,UAAU2R,iBAKvB,WACI,GAAwB,YAApB9R,KAAKwO,YAA4BxO,KAAKoO,QAAUpO,KAAKoO,OAAOvF,cAAcyK,SAAS5E,OAAQ,CAC3F,GAAI1O,KAAKF,YAAcE,KAAKF,UAAUS,UAGlC,YADAP,KAAKoQ,uBAAwB,GAGjC,IAAKpK,SAASuN,gBAAgBnS,SAASpB,KAAK4C,YAAYiG,eACpD,OAKJ,IAHA,IAAqB2K,EAAiBxT,KAAKyT,aAAazT,KAAKkO,wBAAwBrF,cAAc6K,yBAC9EC,EAAa3T,KAAKyT,aAAazT,KAAKoO,OAAOvF,cAAcyK,SAAS,GAAGI,yBACrEE,EAAa,EACzBC,EAAK,EAAGC,EAAK9T,KAAKoO,OAAOvF,cAAcyK,SAAUO,EAAKC,EAAGpF,OAAQmF,IAEtED,GADYE,EAAGD,GACKE,YAExB/T,KAAKsM,iBAAmBqH,EAAaH,EAreR,EAse7BxT,KAAKuM,iBAveyB,IAueNqH,EAAkCI,QAG1DhU,KAAKsM,iBAAmB,EACxBtM,KAAKuM,iBAAmB,EAE5BvM,KAAKoQ,uBAAwB,EAC7BpQ,KAAK6P,mBAAmBiB,gBAO5BlB,EAAazP,UAAUsT,aAKvB,SAAUQ,GACN,OAAOjU,KAAK+P,MAA4B,QAApB/P,KAAK+P,KAAK7M,MAAkB+Q,EAAKC,MAAQD,EAAKE,MAoE/DvE,EAliBsB,CAmiB/BH,GAME2E,EACA","file":"0.573294ca05da8d8231ad.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform, supportsPassiveEventListeners, PlatformModule } from '@angular/cdk/platform';\nimport { Directive, ElementRef, EventEmitter, Injectable, NgZone, Output, Input, NgModule, defineInjectable, inject } from '@angular/core';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { auditTime, takeUntil } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Options to pass to the animationstart listener.\n */\nvar /** @type {?} */ listenerOptions = supportsPassiveEventListeners() ? { passive: true } : false;\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/\\@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nvar AutofillMonitor = /** @class */ (function () {\n    function AutofillMonitor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    /**\n     * Monitor for changes in the autofill state of the given input element.\n     * @param element The element to monitor.\n     * @return A stream of autofill state changes.\n     */\n    /**\n     * Monitor for changes in the autofill state of the given input element.\n     * @param {?} element The element to monitor.\n     * @return {?} A stream of autofill state changes.\n     */\n    AutofillMonitor.prototype.monitor = /**\n     * Monitor for changes in the autofill state of the given input element.\n     * @param {?} element The element to monitor.\n     * @return {?} A stream of autofill state changes.\n     */\n    function (element) {\n        var _this = this;\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        var /** @type {?} */ info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject.asObservable();\n        }\n        var /** @type {?} */ result = new Subject();\n        var /** @type {?} */ cssClass = 'cdk-text-field-autofilled';\n        var /** @type {?} */ listener = function (event) {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                _this._ngZone.run(function () { return result.next({ target: /** @type {?} */ (event.target), isAutofilled: true }); });\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                _this._ngZone.run(function () { return result.next({ target: /** @type {?} */ (event.target), isAutofilled: false }); });\n            }\n        };\n        this._ngZone.runOutsideAngular(function () {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: function () {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            }\n        });\n        return result.asObservable();\n    };\n    /**\n     * Stop monitoring the autofill state of the given input element.\n     * @param element The element to stop monitoring.\n     */\n    /**\n     * Stop monitoring the autofill state of the given input element.\n     * @param {?} element The element to stop monitoring.\n     * @return {?}\n     */\n    AutofillMonitor.prototype.stopMonitoring = /**\n     * Stop monitoring the autofill state of the given input element.\n     * @param {?} element The element to stop monitoring.\n     * @return {?}\n     */\n    function (element) {\n        var /** @type {?} */ info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    AutofillMonitor.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._monitoredElements.forEach(function (_info, element) { return _this.stopMonitoring(element); });\n    };\n    AutofillMonitor.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] },\n    ];\n    /** @nocollapse */\n    AutofillMonitor.ctorParameters = function () { return [\n        { type: Platform, },\n        { type: NgZone, },\n    ]; };\n    /** @nocollapse */ AutofillMonitor.ngInjectableDef = defineInjectable({ factory: function AutofillMonitor_Factory() { return new AutofillMonitor(inject(Platform), inject(NgZone)); }, token: AutofillMonitor, providedIn: \"root\" });\n    return AutofillMonitor;\n}());\n/**\n * A directive that can be used to monitor the autofill state of an input.\n */\nvar CdkAutofill = /** @class */ (function () {\n    function CdkAutofill(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /**\n         * Emits when the autofill state of the element changes.\n         */\n        this.cdkAutofill = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    CdkAutofill.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._autofillMonitor\n            .monitor(this._elementRef.nativeElement)\n            .subscribe(function (event) { return _this.cdkAutofill.emit(event); });\n    };\n    /**\n     * @return {?}\n     */\n    CdkAutofill.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    };\n    CdkAutofill.decorators = [\n        { type: Directive, args: [{\n                    selector: '[cdkAutofill]',\n                },] },\n    ];\n    /** @nocollapse */\n    CdkAutofill.ctorParameters = function () { return [\n        { type: ElementRef, },\n        { type: AutofillMonitor, },\n    ]; };\n    CdkAutofill.propDecorators = {\n        \"cdkAutofill\": [{ type: Output },],\n    };\n    return CdkAutofill;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n */\nvar CdkTextareaAutosize = /** @class */ (function () {\n    function CdkTextareaAutosize(_elementRef, _platform, _ngZone) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        this._textareaElement = /** @type {?} */ (this._elementRef.nativeElement);\n    }\n    Object.defineProperty(CdkTextareaAutosize.prototype, \"minRows\", {\n        get: /**\n         * Minimum amount of rows in the textarea.\n         * @return {?}\n         */\n        function () { return this._minRows; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._minRows = value;\n            this._setMinHeight();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkTextareaAutosize.prototype, \"maxRows\", {\n        get: /**\n         * Maximum amount of rows in the textarea.\n         * @return {?}\n         */\n        function () { return this._maxRows; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._maxRows = value;\n            this._setMaxHeight();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkTextareaAutosize.prototype, \"enabled\", {\n        get: /**\n         * Whether autosizing is enabled or not\n         * @return {?}\n         */\n        function () { return this._enabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            value = coerceBooleanProperty(value);\n            // Only act if the actual value changed. This specifically helps to not run\n            // resizeToFitContent too early (i.e. before ngAfterViewInit)\n            if (this._enabled !== value) {\n                (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    /**\n     * Sets the minimum height of the textarea as determined by minRows.\n     * @return {?}\n     */\n    CdkTextareaAutosize.prototype._setMinHeight = /**\n     * Sets the minimum height of the textarea as determined by minRows.\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ minHeight = this.minRows && this._cachedLineHeight ?\n            this.minRows * this._cachedLineHeight + \"px\" : null;\n        if (minHeight) {\n            this._setTextareaStyle('minHeight', minHeight);\n        }\n    };\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    /**\n     * Sets the maximum height of the textarea as determined by maxRows.\n     * @return {?}\n     */\n    CdkTextareaAutosize.prototype._setMaxHeight = /**\n     * Sets the maximum height of the textarea as determined by maxRows.\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ maxHeight = this.maxRows && this._cachedLineHeight ?\n            this.maxRows * this._cachedLineHeight + \"px\" : null;\n        if (maxHeight) {\n            this._setTextareaStyle('maxHeight', maxHeight);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    CdkTextareaAutosize.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(function () {\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(_this._destroyed))\n                    .subscribe(function () { return _this.resizeToFitContent(true); });\n            });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    CdkTextareaAutosize.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._destroyed.next();\n        this._destroyed.complete();\n    };\n    /**\n     * Sets a style property on the textarea element.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    CdkTextareaAutosize.prototype._setTextareaStyle = /**\n     * Sets a style property on the textarea element.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    function (property, value) {\n        this._textareaElement.style[property] = value;\n    };\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     * @return {?}\n     */\n    CdkTextareaAutosize.prototype._cacheTextareaLineHeight = /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     * @return {?}\n     */\n    function () {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        var /** @type {?} */ textareaClone = /** @type {?} */ (this._textareaElement.cloneNode(false));\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden'; /** @type {?} */\n        ((this._textareaElement.parentNode)).appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight; /** @type {?} */\n        ((this._textareaElement.parentNode)).removeChild(textareaClone);\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    };\n    /**\n     * @return {?}\n     */\n    CdkTextareaAutosize.prototype.ngDoCheck = /**\n     * @return {?}\n     */\n    function () {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    };\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    /**\n     * Resize the textarea to fit its content.\n     * @param {?=} force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     * @return {?}\n     */\n    CdkTextareaAutosize.prototype.resizeToFitContent = /**\n     * Resize the textarea to fit its content.\n     * @param {?=} force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     * @return {?}\n     */\n    function (force) {\n        var _this = this;\n        if (force === void 0) { force = false; }\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        var /** @type {?} */ textarea = /** @type {?} */ (this._elementRef.nativeElement);\n        var /** @type {?} */ value = textarea.value;\n        // Only resize of the value changed since these calculations can be expensive.\n        if (value === this._previousValue && !force) {\n            return;\n        }\n        var /** @type {?} */ placeholderText = textarea.placeholder;\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n        // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n        // need to be removed temporarily.\n        textarea.classList.add('cdk-textarea-autosize-measuring');\n        textarea.placeholder = '';\n        // The cdk-textarea-autosize-measuring class includes a 2px padding to workaround an issue with\n        // Chrome, so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        var /** @type {?} */ height = textarea.scrollHeight - 4;\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = height + \"px\";\n        textarea.classList.remove('cdk-textarea-autosize-measuring');\n        textarea.placeholder = placeholderText;\n        // On Firefox resizing the textarea will prevent it from scrolling to the caret position.\n        // We need to re-set the selection in order for it to scroll to the proper position.\n        if (typeof requestAnimationFrame !== 'undefined') {\n            this._ngZone.runOutsideAngular(function () {\n                return requestAnimationFrame(function () {\n                    var selectionStart = textarea.selectionStart, selectionEnd = textarea.selectionEnd;\n                    // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n                    // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n                    // between the time we requested the animation frame and when it was executed.\n                    // Also note that we have to assert that the textarea is focused before we set the\n                    // selection range. Setting the selection range on a non-focused textarea will cause\n                    // it to receive focus on IE and Edge.\n                    if (!_this._destroyed.isStopped && document.activeElement === textarea) {\n                        textarea.setSelectionRange(selectionStart, selectionEnd);\n                    }\n                });\n            });\n        }\n        this._previousValue = value;\n    };\n    /**\n     * Resets the textarea to it's original size\n     */\n    /**\n     * Resets the textarea to it's original size\n     * @return {?}\n     */\n    CdkTextareaAutosize.prototype.reset = /**\n     * Resets the textarea to it's original size\n     * @return {?}\n     */\n    function () {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight === undefined) {\n            return;\n        }\n        this._textareaElement.style.height = this._initialHeight;\n    };\n    /**\n     * @return {?}\n     */\n    CdkTextareaAutosize.prototype._noopInputHandler = /**\n     * @return {?}\n     */\n    function () {\n        // no-op handler that ensures we're running change detection on input events.\n    };\n    CdkTextareaAutosize.decorators = [\n        { type: Directive, args: [{\n                    selector: 'textarea[cdkTextareaAutosize]',\n                    exportAs: 'cdkTextareaAutosize',\n                    host: {\n                        'class': 'cdk-textarea-autosize',\n                        // Textarea elements that have the directive applied should have a single row by default.\n                        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                        'rows': '1',\n                        '(input)': '_noopInputHandler()',\n                    },\n                },] },\n    ];\n    /** @nocollapse */\n    CdkTextareaAutosize.ctorParameters = function () { return [\n        { type: ElementRef, },\n        { type: Platform, },\n        { type: NgZone, },\n    ]; };\n    CdkTextareaAutosize.propDecorators = {\n        \"minRows\": [{ type: Input, args: ['cdkAutosizeMinRows',] },],\n        \"maxRows\": [{ type: Input, args: ['cdkAutosizeMaxRows',] },],\n        \"enabled\": [{ type: Input, args: ['cdkTextareaAutosize',] },],\n    };\n    return CdkTextareaAutosize;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar TextFieldModule = /** @class */ (function () {\n    function TextFieldModule() {\n    }\n    TextFieldModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [CdkAutofill, CdkTextareaAutosize],\n                    imports: [PlatformModule],\n                    exports: [CdkAutofill, CdkTextareaAutosize],\n                },] },\n    ];\n    return TextFieldModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n//# sourceMappingURL=text-field.es5.js.map\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { __extends } from 'tslib';\nimport { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Inject, Optional, Self, NgZone, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { ErrorStateMatcher, mixinErrorState } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `\\@angular/cdk/text-field` instead.\n * \\@breaking-change 7.0.0\n */\nvar MatTextareaAutosize = /** @class */ (function (_super) {\n    __extends(MatTextareaAutosize, _super);\n    function MatTextareaAutosize() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(MatTextareaAutosize.prototype, \"matAutosizeMinRows\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.minRows; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this.minRows = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatTextareaAutosize.prototype, \"matAutosizeMaxRows\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.maxRows; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this.maxRows = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatTextareaAutosize.prototype, \"matAutosize\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.enabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this.enabled = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatTextareaAutosize.prototype, \"matTextareaAutosize\", {\n        get: /**\n         * @return {?}\n         */\n        function () { return this.enabled; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this.enabled = value; },\n        enumerable: true,\n        configurable: true\n    });\n    MatTextareaAutosize.decorators = [\n        { type: Directive, args: [{\n                    selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n                    exportAs: 'matTextareaAutosize',\n                    inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n                    host: {\n                        'class': 'cdk-textarea-autosize mat-autosize',\n                        // Textarea elements that have the directive applied should have a single row by default.\n                        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                        'rows': '1',\n                        '(input)': '_noopInputHandler()',\n                    },\n                },] },\n    ];\n    /** @nocollapse */\n    MatTextareaAutosize.propDecorators = {\n        \"matAutosizeMinRows\": [{ type: Input },],\n        \"matAutosizeMaxRows\": [{ type: Input },],\n        \"matAutosize\": [{ type: Input, args: ['mat-autosize',] },],\n        \"matTextareaAutosize\": [{ type: Input },],\n    };\n    return MatTextareaAutosize;\n}(CdkTextareaAutosize));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @param {?} type\n * @return {?}\n */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(\"Input type \\\"\" + type + \"\\\" isn't supported by matInput.\");\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nvar /** @type {?} */ MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nvar /** @type {?} */ MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\nvar /** @type {?} */ nextUniqueId = 0;\n/**\n * \\@docs-private\n */\nvar  /**\n * \\@docs-private\n */\nMatInputBase = /** @class */ (function () {\n    function MatInputBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n    return MatInputBase;\n}());\nvar /** @type {?} */ _MatInputMixinBase = mixinErrorState(MatInputBase);\n/**\n * Directive that allows a native input to work inside a `MatFormField`.\n */\nvar MatInput = /** @class */ (function (_super) {\n    __extends(MatInput, _super);\n    function MatInput(_elementRef, _platform, /** @docs-private */\n    ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone) {\n        var _this = _super.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;\n        _this._elementRef = _elementRef;\n        _this._platform = _platform;\n        _this.ngControl = ngControl;\n        _this._autofillMonitor = _autofillMonitor;\n        _this._uid = \"mat-input-\" + nextUniqueId++;\n        /**\n         * Whether the component is being rendered on the server.\n         */\n        _this._isServer = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        _this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        _this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        _this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         */\n        _this.autofilled = false;\n        _this._disabled = false;\n        _this._required = false;\n        _this._type = 'text';\n        _this._readonly = false;\n        _this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week'\n        ].filter(function (t) { return getSupportedInputTypes().has(t); });\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        _this._inputValueAccessor = inputValueAccessor || _this._elementRef.nativeElement;\n        _this._previousNativeValue = _this.value;\n        // Force setter to be called in case id was not specified.\n        // Force setter to be called in case id was not specified.\n        _this.id = _this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular(function () {\n                _elementRef.nativeElement.addEventListener('keyup', function (event) {\n                    var /** @type {?} */ el = /** @type {?} */ (event.target);\n                    if (!el.value && !el.selectionStart && !el.selectionEnd) {\n                        // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                        // `1, 1` fixes it for the first time that you type text and\n                        // then hold delete. Toggling to `1, 1` and then back to\n                        // `0, 0` seems to completely fix it.\n                        el.setSelectionRange(1, 1);\n                        el.setSelectionRange(0, 0);\n                    }\n                });\n            });\n        }\n        _this._isServer = !_this._platform.isBrowser;\n        return _this;\n    }\n    Object.defineProperty(MatInput.prototype, \"disabled\", {\n        get: /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         * @return {?}\n         */\n        function () {\n            if (this.ngControl && this.ngControl.disabled !== null) {\n                return this.ngControl.disabled;\n            }\n            return this._disabled;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._disabled = coerceBooleanProperty(value);\n            // Browsers may not fire the blur event if the input is disabled too quickly.\n            // Reset from here to ensure that the element doesn't become stuck.\n            if (this.focused) {\n                this.focused = false;\n                this.stateChanges.next();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatInput.prototype, \"id\", {\n        get: /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         * @return {?}\n         */\n        function () { return this._id; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._id = value || this._uid; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatInput.prototype, \"required\", {\n        get: /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         * @return {?}\n         */\n        function () { return this._required; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._required = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatInput.prototype, \"type\", {\n        get: /**\n         * Input type of the element.\n         * @return {?}\n         */\n        function () { return this._type; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._type = value || 'text';\n            this._validateType();\n            // When using Angular inputs, developers are no longer able to set the properties on the native\n            // input element. To ensure that bindings for `type` work, we need to sync the setter\n            // with the native property. Textarea elements don't support the type property or attribute.\n            if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n                this._elementRef.nativeElement.type = this._type;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatInput.prototype, \"value\", {\n        get: /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         * @return {?}\n         */\n        function () { return this._inputValueAccessor.value; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (value !== this.value) {\n                this._inputValueAccessor.value = value;\n                this.stateChanges.next();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatInput.prototype, \"readonly\", {\n        get: /**\n         * Whether the element is readonly.\n         * @return {?}\n         */\n        function () { return this._readonly; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) { this._readonly = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MatInput.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(function (event) {\n            _this.autofilled = event.isAutofilled;\n            _this.stateChanges.next();\n        });\n    };\n    /**\n     * @return {?}\n     */\n    MatInput.prototype.ngOnChanges = /**\n     * @return {?}\n     */\n    function () {\n        this.stateChanges.next();\n    };\n    /**\n     * @return {?}\n     */\n    MatInput.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this.stateChanges.complete();\n        this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    };\n    /**\n     * @return {?}\n     */\n    MatInput.prototype.ngDoCheck = /**\n     * @return {?}\n     */\n    function () {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    };\n    /** Focuses the input. */\n    /**\n     * Focuses the input.\n     * @return {?}\n     */\n    MatInput.prototype.focus = /**\n     * Focuses the input.\n     * @return {?}\n     */\n    function () { this._elementRef.nativeElement.focus(); };\n    /** Callback for the cases where the focused state of the input changes. */\n    /**\n     * Callback for the cases where the focused state of the input changes.\n     * @param {?} isFocused\n     * @return {?}\n     */\n    MatInput.prototype._focusChanged = /**\n     * Callback for the cases where the focused state of the input changes.\n     * @param {?} isFocused\n     * @return {?}\n     */\n    function (isFocused) {\n        if (isFocused !== this.focused && !this.readonly) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatInput.prototype._onInput = /**\n     * @return {?}\n     */\n    function () {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    };\n    /** Does some manual dirty checking on the native input `value` property. */\n    /**\n     * Does some manual dirty checking on the native input `value` property.\n     * @return {?}\n     */\n    MatInput.prototype._dirtyCheckNativeValue = /**\n     * Does some manual dirty checking on the native input `value` property.\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ newValue = this.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    };\n    /** Make sure the input is a supported type. */\n    /**\n     * Make sure the input is a supported type.\n     * @return {?}\n     */\n    MatInput.prototype._validateType = /**\n     * Make sure the input is a supported type.\n     * @return {?}\n     */\n    function () {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    };\n    /** Checks whether the input type is one of the types that are never empty. */\n    /**\n     * Checks whether the input type is one of the types that are never empty.\n     * @return {?}\n     */\n    MatInput.prototype._isNeverEmpty = /**\n     * Checks whether the input type is one of the types that are never empty.\n     * @return {?}\n     */\n    function () {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    };\n    /** Checks whether the input is invalid based on the native validation. */\n    /**\n     * Checks whether the input is invalid based on the native validation.\n     * @return {?}\n     */\n    MatInput.prototype._isBadInput = /**\n     * Checks whether the input is invalid based on the native validation.\n     * @return {?}\n     */\n    function () {\n        // The `validity` property won't be present on platform-server.\n        var /** @type {?} */ validity = (/** @type {?} */ (this._elementRef.nativeElement)).validity;\n        return validity && validity.badInput;\n    };\n    /** Determines if the component host is a textarea. */\n    /**\n     * Determines if the component host is a textarea.\n     * @return {?}\n     */\n    MatInput.prototype._isTextarea = /**\n     * Determines if the component host is a textarea.\n     * @return {?}\n     */\n    function () {\n        return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n    };\n    Object.defineProperty(MatInput.prototype, \"empty\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get: /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         * @return {?}\n         */\n        function () {\n            return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n                !this.autofilled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatInput.prototype, \"shouldLabelFloat\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get: /**\n         * Implemented as part of MatFormFieldControl.\n         * \\@docs-private\n         * @return {?}\n         */\n        function () { return this.focused || !this.empty; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    MatInput.prototype.setDescribedByIds = /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    function (ids) { this._ariaDescribedby = ids.join(' '); };\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    MatInput.prototype.onContainerClick = /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    function () { this.focus(); };\n    MatInput.decorators = [\n        { type: Directive, args: [{\n                    selector: \"input[matInput], textarea[matInput]\",\n                    exportAs: 'matInput',\n                    host: {\n                        /**\n                             * @breaking-change 7.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                             */\n                        'class': 'mat-input-element mat-form-field-autofill-control',\n                        '[class.mat-input-server]': '_isServer',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[attr.id]': 'id',\n                        '[attr.placeholder]': 'placeholder',\n                        '[disabled]': 'disabled',\n                        '[required]': 'required',\n                        '[readonly]': 'readonly',\n                        '[attr.aria-describedby]': '_ariaDescribedby || null',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-required]': 'required.toString()',\n                        '(blur)': '_focusChanged(false)',\n                        '(focus)': '_focusChanged(true)',\n                        '(input)': '_onInput()',\n                    },\n                    providers: [{ provide: MatFormFieldControl, useExisting: MatInput }],\n                },] },\n    ];\n    /** @nocollapse */\n    MatInput.ctorParameters = function () { return [\n        { type: ElementRef, },\n        { type: Platform, },\n        { type: NgControl, decorators: [{ type: Optional }, { type: Self },] },\n        { type: NgForm, decorators: [{ type: Optional },] },\n        { type: FormGroupDirective, decorators: [{ type: Optional },] },\n        { type: ErrorStateMatcher, },\n        { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [MAT_INPUT_VALUE_ACCESSOR,] },] },\n        { type: AutofillMonitor, },\n        { type: NgZone, },\n    ]; };\n    MatInput.propDecorators = {\n        \"disabled\": [{ type: Input },],\n        \"id\": [{ type: Input },],\n        \"placeholder\": [{ type: Input },],\n        \"required\": [{ type: Input },],\n        \"type\": [{ type: Input },],\n        \"errorStateMatcher\": [{ type: Input },],\n        \"value\": [{ type: Input },],\n        \"readonly\": [{ type: Input },],\n    };\n    return MatInput;\n}(_MatInputMixinBase));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MatInputModule = /** @class */ (function () {\n    function MatInputModule() {\n    }\n    MatInputModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [MatInput, MatTextareaAutosize],\n                    imports: [\n                        CommonModule,\n                        TextFieldModule,\n                        MatFormFieldModule,\n                    ],\n                    exports: [\n                        TextFieldModule,\n                        MatFormFieldModule,\n                        MatInput,\n                        MatTextareaAutosize,\n                    ],\n                    providers: [ErrorStateMatcher],\n                },] },\n    ];\n    return MatInputModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { MatTextareaAutosize, MatInputBase, _MatInputMixinBase, MatInput, getMatInputUnsupportedTypeError, MatInputModule, MAT_INPUT_VALUE_ACCESSOR };\n//# sourceMappingURL=input.es5.js.map\n","/**\n * @fileoverview This file was generated by the Angular template compiler. Do not edit.\n *\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}\n * tslint:disable\n */ \nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/form-field\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/core\";\nimport * as i4 from \"@angular/cdk/bidi\";\nimport * as i5 from \"@angular/cdk/platform\";\nimport * as i6 from \"@angular/platform-browser/animations\";\nvar MatFormFieldModuleNgFactory = i0.ɵcmf(i1.MatFormFieldModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, []], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i2.NgLocalization, i2.NgLocaleLocalization, [i0.LOCALE_ID, [2, i2.ɵangular_packages_common_common_a]]), i0.ɵmpd(1073742336, i2.CommonModule, i2.CommonModule, []), i0.ɵmpd(1073742336, i1.MatFormFieldModule, i1.MatFormFieldModule, [])]); });\nexport { MatFormFieldModuleNgFactory as MatFormFieldModuleNgFactory };\nvar styles_MatFormField = [\".mat-form-field{display:inline-block;position:relative;text-align:left}[dir=rtl] .mat-form-field{text-align:right}.mat-form-field-wrapper{position:relative}.mat-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-form-field-prefix,.mat-form-field-suffix{white-space:nowrap;flex:none;position:relative}.mat-form-field-infix{display:block;position:relative;flex:auto;min-width:0;width:180px}@media screen and (-ms-high-contrast:active){.mat-form-field-infix{border-image:linear-gradient(transparent,transparent)}}.mat-form-field-label-wrapper{position:absolute;left:0;box-sizing:content-box;width:100%;height:100%;overflow:hidden;pointer-events:none}.mat-form-field-label{position:absolute;left:0;font:inherit;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform .4s cubic-bezier(.25,.8,.25,1),color .4s cubic-bezier(.25,.8,.25,1),width .4s cubic-bezier(.25,.8,.25,1);display:none}[dir=rtl] .mat-form-field-label{transform-origin:100% 0;left:auto;right:0}.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label,.mat-form-field-empty.mat-form-field-label{display:block}.mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:block;transition:none}.mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-can-float .mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:block}.mat-form-field-label:not(.mat-form-field-empty){transition:none}.mat-form-field-underline{position:absolute;width:100%;pointer-events:none;transform:scaleY(1.0001)}.mat-form-field-ripple{position:absolute;left:0;width:100%;transform-origin:50%;transform:scaleX(.5);opacity:0;transition:background-color .3s cubic-bezier(.55,0,.55,.2)}.mat-form-field.mat-focused .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple{opacity:1;transform:scaleX(1);transition:transform .3s cubic-bezier(.25,.8,.25,1),opacity .1s cubic-bezier(.25,.8,.25,1),background-color .3s cubic-bezier(.25,.8,.25,1)}.mat-form-field-subscript-wrapper{position:absolute;box-sizing:border-box;width:100%;overflow:hidden}.mat-form-field-label-wrapper .mat-icon,.mat-form-field-subscript-wrapper .mat-icon{width:1em;height:1em;font-size:inherit;vertical-align:baseline}.mat-form-field-hint-wrapper{display:flex}.mat-form-field-hint-spacer{flex:1 0 1em}.mat-error{display:block}.mat-form-field._mat-animation-noopable .mat-form-field-label,.mat-form-field._mat-animation-noopable .mat-form-field-ripple{transition:none}\", \".mat-form-field-appearance-fill .mat-form-field-flex{border-radius:4px 4px 0 0;padding:.75em .75em 0 .75em}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-fill .mat-form-field-flex{outline:solid 1px}}.mat-form-field-appearance-fill .mat-form-field-underline::before{content:'';display:block;position:absolute;bottom:0;height:1px;width:100%}.mat-form-field-appearance-fill .mat-form-field-ripple{bottom:0;height:2px}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-fill .mat-form-field-ripple{height:0;border-top:solid 2px}}.mat-form-field-appearance-fill:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity .6s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-fill._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}.mat-form-field-appearance-fill .mat-form-field-subscript-wrapper{padding:0 1em}\", \".mat-form-field-appearance-legacy .mat-form-field-label{transform:perspective(100px);-ms-transform:none}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon{width:1em}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button{font:inherit;vertical-align:baseline}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button .mat-icon{font-size:inherit}.mat-form-field-appearance-legacy .mat-form-field-underline{height:1px}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-legacy .mat-form-field-underline{height:0;border-top:solid 1px}}.mat-form-field-appearance-legacy .mat-form-field-ripple{top:0;height:2px}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-legacy .mat-form-field-ripple{height:0;border-top:solid 2px}}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}}.mat-form-field-appearance-legacy.mat-form-field-invalid:not(.mat-focused) .mat-form-field-ripple{height:1px}\", \".mat-form-field-appearance-outline .mat-form-field-wrapper{margin:.25em 0}.mat-form-field-appearance-outline .mat-form-field-flex{padding:0 .75em 0 .75em;margin-top:-.25em;position:relative}.mat-form-field-appearance-outline .mat-form-field-prefix,.mat-form-field-appearance-outline .mat-form-field-suffix{top:.25em}.mat-form-field-appearance-outline .mat-form-field-outline{display:flex;position:absolute;top:.25em;left:0;right:0;bottom:0;pointer-events:none}.mat-form-field-appearance-outline .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-start{border:1px solid currentColor;min-width:5px}.mat-form-field-appearance-outline .mat-form-field-outline-start{border-radius:5px 0 0 5px;border-right-style:none}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-start{border-right-style:solid;border-left-style:none;border-radius:0 5px 5px 0}.mat-form-field-appearance-outline .mat-form-field-outline-end{border-radius:0 5px 5px 0;border-left-style:none;flex-grow:1}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-end{border-left-style:solid;border-right-style:none;border-radius:5px 0 0 5px}.mat-form-field-appearance-outline .mat-form-field-outline-gap{border-radius:.000001px;border:1px solid currentColor;border-left-style:none;border-right-style:none}.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-outline-gap{border-top-color:transparent}.mat-form-field-appearance-outline .mat-form-field-outline-thick{opacity:0}.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-gap,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-start{border-width:2px;transition:border-color .3s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline{opacity:0;transition:opacity .1s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline{opacity:0;transition:opacity .6s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{padding:0 1em}.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-end,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-gap,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-start,.mat-form-field-appearance-outline._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-outline{transition:none}\", \".mat-form-field-appearance-standard .mat-form-field-flex{padding-top:.75em}.mat-form-field-appearance-standard .mat-form-field-underline{height:1px}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-standard .mat-form-field-underline{height:0;border-top:solid 1px}}.mat-form-field-appearance-standard .mat-form-field-ripple{bottom:0;height:2px}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-standard .mat-form-field-ripple{height:0;border-top:2px}}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}}.mat-form-field-appearance-standard:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity .6s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-standard._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}\", \".mat-input-element{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element::-ms-clear,.mat-input-element::-ms-reveal{display:none}.mat-input-element,.mat-input-element::-webkit-search-cancel-button,.mat-input-element::-webkit-search-decoration,.mat-input-element::-webkit-search-results-button,.mat-input-element::-webkit-search-results-decoration{-webkit-appearance:none}.mat-input-element::-webkit-caps-lock-indicator,.mat-input-element::-webkit-contacts-auto-fill-button,.mat-input-element::-webkit-credentials-auto-fill-button{visibility:hidden}.mat-input-element[type=date]::after,.mat-input-element[type=datetime-local]::after,.mat-input-element[type=datetime]::after,.mat-input-element[type=month]::after,.mat-input-element[type=time]::after,.mat-input-element[type=week]::after{content:' ';white-space:pre;width:1px}.mat-input-element::placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-input-element::-moz-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-input-element::-webkit-input-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-input-element:-ms-input-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-form-field-hide-placeholder .mat-input-element::placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}textarea.mat-input-element{resize:vertical;overflow:auto}textarea.mat-input-element.cdk-textarea-autosize{resize:none}textarea.mat-input-element{padding:2px 0;margin:-2px 0}\"];\nvar RenderType_MatFormField = i0.ɵcrt({ encapsulation: 2, styles: styles_MatFormField, data: { \"animation\": [{ type: 7, name: \"transitionMessages\", definitions: [{ type: 0, name: \"enter\", styles: { type: 6, styles: { opacity: 1, transform: \"translateY(0%)\" }, offset: null }, options: undefined }, { type: 1, expr: \"void => enter\", animation: [{ type: 6, styles: { opacity: 0, transform: \"translateY(-100%)\" }, offset: null }, { type: 4, styles: null, timings: \"300ms cubic-bezier(0.55, 0, 0.55, 0.2)\" }], options: null }], options: {} }] } });\nexport { RenderType_MatFormField as RenderType_MatFormField };\nfunction View_MatFormField_1(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 8, null, null, null, null, null, null, null)), (_l()(), i0.ɵeld(1, 0, null, null, 3, \"div\", [[\"class\", \"mat-form-field-outline\"]], null, null, null, null, null)), (_l()(), i0.ɵeld(2, 0, null, null, 0, \"div\", [[\"class\", \"mat-form-field-outline-start\"]], [[4, \"width\", \"px\"]], null, null, null, null)), (_l()(), i0.ɵeld(3, 0, null, null, 0, \"div\", [[\"class\", \"mat-form-field-outline-gap\"]], [[4, \"width\", \"px\"]], null, null, null, null)), (_l()(), i0.ɵeld(4, 0, null, null, 0, \"div\", [[\"class\", \"mat-form-field-outline-end\"]], null, null, null, null, null)), (_l()(), i0.ɵeld(5, 0, null, null, 3, \"div\", [[\"class\", \"mat-form-field-outline mat-form-field-outline-thick\"]], null, null, null, null, null)), (_l()(), i0.ɵeld(6, 0, null, null, 0, \"div\", [[\"class\", \"mat-form-field-outline-start\"]], [[4, \"width\", \"px\"]], null, null, null, null)), (_l()(), i0.ɵeld(7, 0, null, null, 0, \"div\", [[\"class\", \"mat-form-field-outline-gap\"]], [[4, \"width\", \"px\"]], null, null, null, null)), (_l()(), i0.ɵeld(8, 0, null, null, 0, \"div\", [[\"class\", \"mat-form-field-outline-end\"]], null, null, null, null, null))], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co._outlineGapStart; _ck(_v, 2, 0, currVal_0); var currVal_1 = _co._outlineGapWidth; _ck(_v, 3, 0, currVal_1); var currVal_2 = _co._outlineGapStart; _ck(_v, 6, 0, currVal_2); var currVal_3 = _co._outlineGapWidth; _ck(_v, 7, 0, currVal_3); }); }\nfunction View_MatFormField_2(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"div\", [[\"class\", \"mat-form-field-prefix\"]], null, null, null, null, null)), i0.ɵncd(null, 0)], null, null); }\nfunction View_MatFormField_4(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 2, null, null, null, null, null, null, null)), i0.ɵncd(null, 2), (_l()(), i0.ɵted(2, null, [\"\", \"\"]))], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co._control.placeholder; _ck(_v, 2, 0, currVal_0); }); }\nfunction View_MatFormField_5(_l) { return i0.ɵvid(0, [i0.ɵncd(null, 3), (_l()(), i0.ɵand(0, null, null, 0))], null, null); }\nfunction View_MatFormField_6(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"span\", [[\"aria-hidden\", \"true\"], [\"class\", \"mat-placeholder-required mat-form-field-required-marker\"]], null, null, null, null, null)), (_l()(), i0.ɵted(-1, null, [\"\\u00A0*\"]))], null, null); }\nfunction View_MatFormField_3(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, [[4, 0], [\"label\", 1]], null, 7, \"label\", [[\"class\", \"mat-form-field-label\"]], [[8, \"id\", 0], [1, \"for\", 0], [1, \"aria-owns\", 0], [2, \"mat-empty\", null], [2, \"mat-form-field-empty\", null], [2, \"mat-accent\", null], [2, \"mat-warn\", null]], null, null, null, null)), i0.ɵdid(1, 16384, null, 0, i2.NgSwitch, [], { ngSwitch: [0, \"ngSwitch\"] }, null), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatFormField_4)), i0.ɵdid(3, 278528, null, 0, i2.NgSwitchCase, [i0.ViewContainerRef, i0.TemplateRef, i2.NgSwitch], { ngSwitchCase: [0, \"ngSwitchCase\"] }, null), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatFormField_5)), i0.ɵdid(5, 278528, null, 0, i2.NgSwitchCase, [i0.ViewContainerRef, i0.TemplateRef, i2.NgSwitch], { ngSwitchCase: [0, \"ngSwitchCase\"] }, null), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatFormField_6)), i0.ɵdid(7, 16384, null, 0, i2.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, \"ngIf\"] }, null)], function (_ck, _v) { var _co = _v.component; var currVal_7 = _co._hasLabel(); _ck(_v, 1, 0, currVal_7); var currVal_8 = false; _ck(_v, 3, 0, currVal_8); var currVal_9 = true; _ck(_v, 5, 0, currVal_9); var currVal_10 = ((!_co.hideRequiredMarker && _co._control.required) && !_co._control.disabled); _ck(_v, 7, 0, currVal_10); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co._labelId; var currVal_1 = _co._control.id; var currVal_2 = _co._control.id; var currVal_3 = (_co._control.empty && !_co._shouldAlwaysFloat); var currVal_4 = (_co._control.empty && !_co._shouldAlwaysFloat); var currVal_5 = (_co.color == \"accent\"); var currVal_6 = (_co.color == \"warn\"); _ck(_v, 0, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6); }); }\nfunction View_MatFormField_7(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"div\", [[\"class\", \"mat-form-field-suffix\"]], null, null, null, null, null)), i0.ɵncd(null, 4)], null, null); }\nfunction View_MatFormField_8(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, [[1, 0], [\"underline\", 1]], null, 1, \"div\", [[\"class\", \"mat-form-field-underline\"]], null, null, null, null, null)), (_l()(), i0.ɵeld(1, 0, null, null, 0, \"span\", [[\"class\", \"mat-form-field-ripple\"]], [[2, \"mat-accent\", null], [2, \"mat-warn\", null]], null, null, null, null))], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = (_co.color == \"accent\"); var currVal_1 = (_co.color == \"warn\"); _ck(_v, 1, 0, currVal_0, currVal_1); }); }\nfunction View_MatFormField_9(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"div\", [], [[24, \"@transitionMessages\", 0]], null, null, null, null)), i0.ɵncd(null, 5)], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co._subscriptAnimationState; _ck(_v, 0, 0, currVal_0); }); }\nfunction View_MatFormField_11(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 1, \"div\", [[\"class\", \"mat-hint\"]], [[8, \"id\", 0]], null, null, null, null)), (_l()(), i0.ɵted(1, null, [\"\", \"\"]))], null, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co._hintLabelId; _ck(_v, 0, 0, currVal_0); var currVal_1 = _co.hintLabel; _ck(_v, 1, 0, currVal_1); }); }\nfunction View_MatFormField_10(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 5, \"div\", [[\"class\", \"mat-form-field-hint-wrapper\"]], [[24, \"@transitionMessages\", 0]], null, null, null, null)), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatFormField_11)), i0.ɵdid(2, 16384, null, 0, i2.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, \"ngIf\"] }, null), i0.ɵncd(null, 6), (_l()(), i0.ɵeld(4, 0, null, null, 0, \"div\", [[\"class\", \"mat-form-field-hint-spacer\"]], null, null, null, null, null)), i0.ɵncd(null, 7)], function (_ck, _v) { var _co = _v.component; var currVal_1 = _co.hintLabel; _ck(_v, 2, 0, currVal_1); }, function (_ck, _v) { var _co = _v.component; var currVal_0 = _co._subscriptAnimationState; _ck(_v, 0, 0, currVal_0); }); }\nexport function View_MatFormField_0(_l) { return i0.ɵvid(2, [i0.ɵqud(671088640, 1, { underlineRef: 0 }), i0.ɵqud(402653184, 2, { _connectionContainerRef: 0 }), i0.ɵqud(402653184, 3, { _inputContainerRef: 0 }), i0.ɵqud(671088640, 4, { _label: 0 }), (_l()(), i0.ɵeld(4, 0, null, null, 20, \"div\", [[\"class\", \"mat-form-field-wrapper\"]], null, null, null, null, null)), (_l()(), i0.ɵeld(5, 0, [[2, 0], [\"connectionContainer\", 1]], null, 11, \"div\", [[\"class\", \"mat-form-field-flex\"]], null, [[null, \"click\"]], function (_v, en, $event) { var ad = true; var _co = _v.component; if ((\"click\" === en)) {\n        var pd_0 = ((_co._control.onContainerClick && _co._control.onContainerClick($event)) !== false);\n        ad = (pd_0 && ad);\n    } return ad; }, null, null)), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatFormField_1)), i0.ɵdid(7, 16384, null, 0, i2.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, \"ngIf\"] }, null), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatFormField_2)), i0.ɵdid(9, 16384, null, 0, i2.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, \"ngIf\"] }, null), (_l()(), i0.ɵeld(10, 0, [[3, 0], [\"inputContainer\", 1]], null, 4, \"div\", [[\"class\", \"mat-form-field-infix\"]], null, null, null, null, null)), i0.ɵncd(null, 1), (_l()(), i0.ɵeld(12, 0, null, null, 2, \"span\", [[\"class\", \"mat-form-field-label-wrapper\"]], null, null, null, null, null)), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatFormField_3)), i0.ɵdid(14, 16384, null, 0, i2.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, \"ngIf\"] }, null), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatFormField_7)), i0.ɵdid(16, 16384, null, 0, i2.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, \"ngIf\"] }, null), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatFormField_8)), i0.ɵdid(18, 16384, null, 0, i2.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0, \"ngIf\"] }, null), (_l()(), i0.ɵeld(19, 0, null, null, 5, \"div\", [[\"class\", \"mat-form-field-subscript-wrapper\"]], null, null, null, null, null)), i0.ɵdid(20, 16384, null, 0, i2.NgSwitch, [], { ngSwitch: [0, \"ngSwitch\"] }, null), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatFormField_9)), i0.ɵdid(22, 278528, null, 0, i2.NgSwitchCase, [i0.ViewContainerRef, i0.TemplateRef, i2.NgSwitch], { ngSwitchCase: [0, \"ngSwitchCase\"] }, null), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_MatFormField_10)), i0.ɵdid(24, 278528, null, 0, i2.NgSwitchCase, [i0.ViewContainerRef, i0.TemplateRef, i2.NgSwitch], { ngSwitchCase: [0, \"ngSwitchCase\"] }, null)], function (_ck, _v) { var _co = _v.component; var currVal_0 = (_co.appearance == \"outline\"); _ck(_v, 7, 0, currVal_0); var currVal_1 = _co._prefixChildren.length; _ck(_v, 9, 0, currVal_1); var currVal_2 = _co._hasFloatingLabel(); _ck(_v, 14, 0, currVal_2); var currVal_3 = _co._suffixChildren.length; _ck(_v, 16, 0, currVal_3); var currVal_4 = (_co.appearance != \"outline\"); _ck(_v, 18, 0, currVal_4); var currVal_5 = _co._getDisplayedMessages(); _ck(_v, 20, 0, currVal_5); var currVal_6 = \"error\"; _ck(_v, 22, 0, currVal_6); var currVal_7 = \"hint\"; _ck(_v, 24, 0, currVal_7); }, null); }\nexport function View_MatFormField_Host_0(_l) { return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, 0, null, null, 8, \"mat-form-field\", [[\"class\", \"mat-form-field\"]], [[2, \"mat-form-field-appearance-standard\", null], [2, \"mat-form-field-appearance-fill\", null], [2, \"mat-form-field-appearance-outline\", null], [2, \"mat-form-field-appearance-legacy\", null], [2, \"mat-form-field-invalid\", null], [2, \"mat-form-field-can-float\", null], [2, \"mat-form-field-should-float\", null], [2, \"mat-form-field-hide-placeholder\", null], [2, \"mat-form-field-disabled\", null], [2, \"mat-form-field-autofilled\", null], [2, \"mat-focused\", null], [2, \"mat-accent\", null], [2, \"mat-warn\", null], [2, \"ng-untouched\", null], [2, \"ng-touched\", null], [2, \"ng-pristine\", null], [2, \"ng-dirty\", null], [2, \"ng-valid\", null], [2, \"ng-invalid\", null], [2, \"ng-pending\", null], [2, \"_mat-animation-noopable\", null]], null, null, View_MatFormField_0, RenderType_MatFormField)), i0.ɵdid(1, 7389184, null, 7, i1.MatFormField, [i0.ElementRef, i0.ChangeDetectorRef, [2, i3.MAT_LABEL_GLOBAL_OPTIONS], [2, i4.Directionality], [2, i1.MAT_FORM_FIELD_DEFAULT_OPTIONS], i5.Platform, i0.NgZone, [2, i6.ANIMATION_MODULE_TYPE]], null, null), i0.ɵqud(335544320, 1, { _control: 0 }), i0.ɵqud(335544320, 2, { _placeholderChild: 0 }), i0.ɵqud(335544320, 3, { _labelChild: 0 }), i0.ɵqud(603979776, 4, { _errorChildren: 1 }), i0.ɵqud(603979776, 5, { _hintChildren: 1 }), i0.ɵqud(603979776, 6, { _prefixChildren: 1 }), i0.ɵqud(603979776, 7, { _suffixChildren: 1 })], null, function (_ck, _v) { var currVal_0 = (i0.ɵnov(_v, 1).appearance == \"standard\"); var currVal_1 = (i0.ɵnov(_v, 1).appearance == \"fill\"); var currVal_2 = (i0.ɵnov(_v, 1).appearance == \"outline\"); var currVal_3 = (i0.ɵnov(_v, 1).appearance == \"legacy\"); var currVal_4 = i0.ɵnov(_v, 1)._control.errorState; var currVal_5 = i0.ɵnov(_v, 1)._canLabelFloat; var currVal_6 = i0.ɵnov(_v, 1)._shouldLabelFloat(); var currVal_7 = i0.ɵnov(_v, 1)._hideControlPlaceholder(); var currVal_8 = i0.ɵnov(_v, 1)._control.disabled; var currVal_9 = i0.ɵnov(_v, 1)._control.autofilled; var currVal_10 = i0.ɵnov(_v, 1)._control.focused; var currVal_11 = (i0.ɵnov(_v, 1).color == \"accent\"); var currVal_12 = (i0.ɵnov(_v, 1).color == \"warn\"); var currVal_13 = i0.ɵnov(_v, 1)._shouldForward(\"untouched\"); var currVal_14 = i0.ɵnov(_v, 1)._shouldForward(\"touched\"); var currVal_15 = i0.ɵnov(_v, 1)._shouldForward(\"pristine\"); var currVal_16 = i0.ɵnov(_v, 1)._shouldForward(\"dirty\"); var currVal_17 = i0.ɵnov(_v, 1)._shouldForward(\"valid\"); var currVal_18 = i0.ɵnov(_v, 1)._shouldForward(\"invalid\"); var currVal_19 = i0.ɵnov(_v, 1)._shouldForward(\"pending\"); var currVal_20 = !i0.ɵnov(_v, 1)._animationsEnabled; _ck(_v, 0, 1, [currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6, currVal_7, currVal_8, currVal_9, currVal_10, currVal_11, currVal_12, currVal_13, currVal_14, currVal_15, currVal_16, currVal_17, currVal_18, currVal_19, currVal_20]); }); }\nvar MatFormFieldNgFactory = i0.ɵccf(\"mat-form-field\", i1.MatFormField, View_MatFormField_Host_0, { color: \"color\", appearance: \"appearance\", hideRequiredMarker: \"hideRequiredMarker\", hintLabel: \"hintLabel\", floatLabel: \"floatLabel\" }, {}, [\"[matPrefix]\", \"*\", \"mat-placeholder\", \"mat-label\", \"[matSuffix]\", \"mat-error\", \"mat-hint:not([align='end'])\", \"mat-hint[align='end']\"]);\nexport { MatFormFieldNgFactory as MatFormFieldNgFactory };\n","<div class=\"mat-form-field-wrapper\"><div class=\"mat-form-field-flex\" #connectionContainer (click)=\"_control.onContainerClick && _control.onContainerClick($event)\"><ng-container *ngIf=\"appearance == 'outline'\"><div class=\"mat-form-field-outline\"><div class=\"mat-form-field-outline-start\" [style.width.px]=\"_outlineGapStart\"></div><div class=\"mat-form-field-outline-gap\" [style.width.px]=\"_outlineGapWidth\"></div><div class=\"mat-form-field-outline-end\"></div></div><div class=\"mat-form-field-outline mat-form-field-outline-thick\"><div class=\"mat-form-field-outline-start\" [style.width.px]=\"_outlineGapStart\"></div><div class=\"mat-form-field-outline-gap\" [style.width.px]=\"_outlineGapWidth\"></div><div class=\"mat-form-field-outline-end\"></div></div></ng-container><div class=\"mat-form-field-prefix\" *ngIf=\"_prefixChildren.length\"><ng-content select=\"[matPrefix]\"></ng-content></div><div class=\"mat-form-field-infix\" #inputContainer><ng-content></ng-content><span class=\"mat-form-field-label-wrapper\"><label class=\"mat-form-field-label\" [id]=\"_labelId\" [attr.for]=\"_control.id\" [attr.aria-owns]=\"_control.id\" [class.mat-empty]=\"_control.empty && !_shouldAlwaysFloat\" [class.mat-form-field-empty]=\"_control.empty && !_shouldAlwaysFloat\" [class.mat-accent]=\"color == 'accent'\" [class.mat-warn]=\"color == 'warn'\" #label *ngIf=\"_hasFloatingLabel()\" [ngSwitch]=\"_hasLabel()\"><ng-container *ngSwitchCase=\"false\"><ng-content select=\"mat-placeholder\"></ng-content>{{_control.placeholder}}</ng-container><ng-content select=\"mat-label\" *ngSwitchCase=\"true\"></ng-content><span class=\"mat-placeholder-required mat-form-field-required-marker\" aria-hidden=\"true\" *ngIf=\"!hideRequiredMarker && _control.required && !_control.disabled\">&nbsp;*</span></label></span></div><div class=\"mat-form-field-suffix\" *ngIf=\"_suffixChildren.length\"><ng-content select=\"[matSuffix]\"></ng-content></div></div><div class=\"mat-form-field-underline\" #underline *ngIf=\"appearance != 'outline'\"><span class=\"mat-form-field-ripple\" [class.mat-accent]=\"color == 'accent'\" [class.mat-warn]=\"color == 'warn'\"></span></div><div class=\"mat-form-field-subscript-wrapper\" [ngSwitch]=\"_getDisplayedMessages()\"><div *ngSwitchCase=\"'error'\" [@transitionMessages]=\"_subscriptAnimationState\"><ng-content select=\"mat-error\"></ng-content></div><div class=\"mat-form-field-hint-wrapper\" *ngSwitchCase=\"'hint'\" [@transitionMessages]=\"_subscriptAnimationState\"><div *ngIf=\"hintLabel\" [id]=\"_hintLabelId\" class=\"mat-hint\">{{hintLabel}}</div><ng-content select=\"mat-hint:not([align='end'])\"></ng-content><div class=\"mat-form-field-hint-spacer\"></div><ng-content select=\"mat-hint[align='end']\"></ng-content></div></div></div>","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, Input, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, ElementRef, Inject, InjectionToken, NgZone, Optional, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { __extends } from 'tslib';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { MAT_LABEL_GLOBAL_OPTIONS, mixinColor } from '@angular/material/core';\nimport { EMPTY, fromEvent, merge } from 'rxjs';\nimport { startWith, take } from 'rxjs/operators';\nimport { Platform } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ nextUniqueId = 0;\n/**\n * Single error message to be shown underneath the form field.\n */\nvar MatError = /** @class */ (function () {\n    function MatError() {\n        this.id = \"mat-error-\" + nextUniqueId++;\n    }\n    MatError.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-error',\n                    host: {\n                        'class': 'mat-error',\n                        'role': 'alert',\n                        '[attr.id]': 'id',\n                    }\n                },] },\n    ];\n    /** @nocollapse */\n    MatError.propDecorators = {\n        \"id\": [{ type: Input },],\n    };\n    return MatError;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Animations used by the MatFormField.\n */\nvar /** @type {?} */ matFormFieldAnimations = {\n    /** Animation that transitions the form field's error and hint messages. */\n    transitionMessages: trigger('transitionMessages', [\n        // TODO(mmalerba): Use angular animations for label animation as well.\n        state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n        transition('void => enter', [\n            style({ opacity: 0, transform: 'translateY(-100%)' }),\n            animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n        ]),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * An interface which allows a control to work inside of a `MatFormField`.\n * @abstract\n * @template T\n */\nvar  /**\n * An interface which allows a control to work inside of a `MatFormField`.\n * @abstract\n * @template T\n */\nMatFormFieldControl = /** @class */ (function () {\n    function MatFormFieldControl() {\n    }\n    return MatFormFieldControl;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getMatFormFieldPlaceholderConflictError() {\n    return Error('Placeholder attribute and child element were both specified.');\n}\n/**\n * \\@docs-private\n * @param {?} align\n * @return {?}\n */\nfunction getMatFormFieldDuplicatedHintError(align) {\n    return Error(\"A hint was already declared for 'align=\\\"\" + align + \"\\\"'.\");\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction getMatFormFieldMissingControlError() {\n    return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ nextUniqueId$1 = 0;\n/**\n * Hint text to be shown underneath the form field control.\n */\nvar MatHint = /** @class */ (function () {\n    function MatHint() {\n        /**\n         * Whether to align the hint label at the start or end of the line.\n         */\n        this.align = 'start';\n        /**\n         * Unique ID for the hint. Used for the aria-describedby on the form field control.\n         */\n        this.id = \"mat-hint-\" + nextUniqueId$1++;\n    }\n    MatHint.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-hint',\n                    host: {\n                        'class': 'mat-hint',\n                        '[class.mat-right]': 'align == \"end\"',\n                        '[attr.id]': 'id',\n                        // Remove align attribute to prevent it from interfering with layout.\n                        '[attr.align]': 'null',\n                    }\n                },] },\n    ];\n    /** @nocollapse */\n    MatHint.propDecorators = {\n        \"align\": [{ type: Input },],\n        \"id\": [{ type: Input },],\n    };\n    return MatHint;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * The floating label for a `mat-form-field`.\n */\nvar MatLabel = /** @class */ (function () {\n    function MatLabel() {\n    }\n    MatLabel.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-label'\n                },] },\n    ];\n    return MatLabel;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * \\@breaking-change 8.0.0\n */\nvar MatPlaceholder = /** @class */ (function () {\n    function MatPlaceholder() {\n    }\n    MatPlaceholder.decorators = [\n        { type: Directive, args: [{\n                    selector: 'mat-placeholder'\n                },] },\n    ];\n    return MatPlaceholder;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Prefix to be placed the the front of the form field.\n */\nvar MatPrefix = /** @class */ (function () {\n    function MatPrefix() {\n    }\n    MatPrefix.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matPrefix]',\n                },] },\n    ];\n    return MatPrefix;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Suffix to be placed at the end of the form field.\n */\nvar MatSuffix = /** @class */ (function () {\n    function MatSuffix() {\n    }\n    MatSuffix.decorators = [\n        { type: Directive, args: [{\n                    selector: '[matSuffix]',\n                },] },\n    ];\n    return MatSuffix;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar /** @type {?} */ nextUniqueId$2 = 0;\nvar /** @type {?} */ floatingLabelScale = 0.75;\nvar /** @type {?} */ outlineGapPadding = 5;\n/**\n * Boilerplate for applying mixins to MatFormField.\n * \\@docs-private\n */\nvar  /**\n * Boilerplate for applying mixins to MatFormField.\n * \\@docs-private\n */\nMatFormFieldBase = /** @class */ (function () {\n    function MatFormFieldBase(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    return MatFormFieldBase;\n}());\n/**\n * Base class to which we're applying the form field mixins.\n * \\@docs-private\n */\nvar /** @type {?} */ _MatFormFieldMixinBase = mixinColor(MatFormFieldBase, 'primary');\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nvar /** @type {?} */ MAT_FORM_FIELD_DEFAULT_OPTIONS = new InjectionToken('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n/**\n * Container for form controls that applies Material Design styling and behavior.\n */\nvar MatFormField = /** @class */ (function (_super) {\n    __extends(MatFormField, _super);\n    function MatFormField(_elementRef, _changeDetectorRef, labelOptions, _dir, _defaultOptions, _platform, _ngZone, _animationMode) {\n        var _this = _super.call(this, _elementRef) || this;\n        _this._elementRef = _elementRef;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this._dir = _dir;\n        _this._defaultOptions = _defaultOptions;\n        _this._platform = _platform;\n        _this._ngZone = _ngZone;\n        /**\n         * Override for the logic that disables the label animation in certain cases.\n         */\n        _this._showAlwaysAnimate = false;\n        /**\n         * State of the mat-hint and mat-error animations.\n         */\n        _this._subscriptAnimationState = '';\n        _this._hintLabel = '';\n        // Unique id for the hint label.\n        _this._hintLabelId = \"mat-hint-\" + nextUniqueId$2++;\n        // Unique id for the internal form field label.\n        _this._labelId = \"mat-form-field-label-\" + nextUniqueId$2++;\n        _this._outlineGapWidth = 0;\n        _this._outlineGapStart = 0;\n        _this._initialGapCalculated = false;\n        _this._labelOptions = labelOptions ? labelOptions : {};\n        _this.floatLabel = _this._labelOptions.float || 'auto';\n        _this._animationsEnabled = _animationMode !== 'NoopAnimations';\n        return _this;\n    }\n    Object.defineProperty(MatFormField.prototype, \"appearance\", {\n        get: /**\n         * The form-field appearance style.\n         * @return {?}\n         */\n        function () {\n            return this._appearance || this._defaultOptions && this._defaultOptions.appearance || 'legacy';\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            // If we're switching to `outline` from another appearance, we have to recalculate the gap.\n            if (value !== this._appearance && value === 'outline') {\n                this._initialGapCalculated = false;\n            }\n            this._appearance = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatFormField.prototype, \"hideRequiredMarker\", {\n        get: /**\n         * Whether the required marker should be hidden.\n         * @return {?}\n         */\n        function () { return this._hideRequiredMarker; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._hideRequiredMarker = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatFormField.prototype, \"_shouldAlwaysFloat\", {\n        /** Whether the floating label should always float or not. */\n        get: /**\n         * Whether the floating label should always float or not.\n         * @return {?}\n         */\n        function () {\n            return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatFormField.prototype, \"_canLabelFloat\", {\n        /** Whether the label can float or not. */\n        get: /**\n         * Whether the label can float or not.\n         * @return {?}\n         */\n        function () { return this.floatLabel !== 'never'; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatFormField.prototype, \"hintLabel\", {\n        get: /**\n         * Text for the form field hint.\n         * @return {?}\n         */\n        function () { return this._hintLabel; },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            this._hintLabel = value;\n            this._processHints();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatFormField.prototype, \"floatLabel\", {\n        get: /**\n         * Whether the label should always float, never float or float as the user types.\n         *\n         * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n         * way to make the floating label emulate the behavior of a standard input placeholder. However\n         * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n         * appearances the `never` option has been disabled in favor of just using the placeholder.\n         * @return {?}\n         */\n        function () {\n            return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n        },\n        set: /**\n         * @param {?} value\n         * @return {?}\n         */\n        function (value) {\n            if (value !== this._floatLabel) {\n                this._floatLabel = value || this._labelOptions.float || 'auto';\n                this._changeDetectorRef.markForCheck();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     */\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     * @return {?}\n     */\n    MatFormField.prototype.getConnectedOverlayOrigin = /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     * @return {?}\n     */\n    function () {\n        return this._connectionContainerRef || this._elementRef;\n    };\n    /**\n     * @return {?}\n     */\n    MatFormField.prototype.ngAfterContentInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._validateControlChild();\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(\"mat-form-field-type-\" + this._control.controlType);\n        }\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith(/** @type {?} */ ((null)))).subscribe(function () {\n            _this._validatePlaceholders();\n            _this._syncDescribedByIds();\n            _this._changeDetectorRef.markForCheck();\n        });\n        // Run change detection if the value, prefix, or suffix changes.\n        var /** @type {?} */ valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n        merge(valueChanges, this._prefixChildren.changes, this._suffixChildren.changes)\n            .subscribe(function () { return _this._changeDetectorRef.markForCheck(); });\n        // Re-validate when the number of hints changes.\n        this._hintChildren.changes.pipe(startWith(null)).subscribe(function () {\n            _this._processHints();\n            _this._changeDetectorRef.markForCheck();\n        });\n        // Update the aria-described by when the number of errors changes.\n        this._errorChildren.changes.pipe(startWith(null)).subscribe(function () {\n            _this._syncDescribedByIds();\n            _this._changeDetectorRef.markForCheck();\n        });\n    };\n    /**\n     * @return {?}\n     */\n    MatFormField.prototype.ngAfterContentChecked = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this._validateControlChild();\n        if (!this._initialGapCalculated) {\n            // @breaking-change 7.0.0 Remove this check and else block once _ngZone is required.\n            if (this._ngZone) {\n                // It's important that we run this outside the `_ngZone`, because the `Promise.resolve`\n                // can kick us into an infinite change detection loop, if the `_initialGapCalculated`\n                // wasn't flipped on for some reason.\n                this._ngZone.runOutsideAngular(function () {\n                    Promise.resolve().then(function () { return _this.updateOutlineGap(); });\n                });\n            }\n            else {\n                Promise.resolve().then(function () { return _this.updateOutlineGap(); });\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MatFormField.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n    function () {\n        // Avoid animations on load.\n        this._subscriptAnimationState = 'enter';\n        this._changeDetectorRef.detectChanges();\n    };\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    /**\n     * Determines whether a class from the NgControl should be forwarded to the host element.\n     * @param {?} prop\n     * @return {?}\n     */\n    MatFormField.prototype._shouldForward = /**\n     * Determines whether a class from the NgControl should be forwarded to the host element.\n     * @param {?} prop\n     * @return {?}\n     */\n    function (prop) {\n        var /** @type {?} */ ngControl = this._control ? this._control.ngControl : null;\n        return ngControl && ngControl[prop];\n    };\n    /**\n     * @return {?}\n     */\n    MatFormField.prototype._hasPlaceholder = /**\n     * @return {?}\n     */\n    function () {\n        return !!(this._control && this._control.placeholder || this._placeholderChild);\n    };\n    /**\n     * @return {?}\n     */\n    MatFormField.prototype._hasLabel = /**\n     * @return {?}\n     */\n    function () {\n        return !!this._labelChild;\n    };\n    /**\n     * @return {?}\n     */\n    MatFormField.prototype._shouldLabelFloat = /**\n     * @return {?}\n     */\n    function () {\n        return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n    };\n    /**\n     * @return {?}\n     */\n    MatFormField.prototype._hideControlPlaceholder = /**\n     * @return {?}\n     */\n    function () {\n        // In the legacy appearance the placeholder is promoted to a label if no label is given.\n        return this.appearance === 'legacy' && !this._hasLabel() ||\n            this._hasLabel() && !this._shouldLabelFloat();\n    };\n    /**\n     * @return {?}\n     */\n    MatFormField.prototype._hasFloatingLabel = /**\n     * @return {?}\n     */\n    function () {\n        // In the legacy appearance the placeholder is promoted to a label if no label is given.\n        return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n    };\n    /** Determines whether to display hints or errors. */\n    /**\n     * Determines whether to display hints or errors.\n     * @return {?}\n     */\n    MatFormField.prototype._getDisplayedMessages = /**\n     * Determines whether to display hints or errors.\n     * @return {?}\n     */\n    function () {\n        return (this._errorChildren && this._errorChildren.length > 0 &&\n            this._control.errorState) ? 'error' : 'hint';\n    };\n    /** Animates the placeholder up and locks it in position. */\n    /**\n     * Animates the placeholder up and locks it in position.\n     * @return {?}\n     */\n    MatFormField.prototype._animateAndLockLabel = /**\n     * Animates the placeholder up and locks it in position.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._hasFloatingLabel() && this._canLabelFloat) {\n            // If animations are disabled, we shouldn't go in here,\n            // because the `transitionend` will never fire.\n            if (this._animationsEnabled) {\n                this._showAlwaysAnimate = true;\n                fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(function () {\n                    _this._showAlwaysAnimate = false;\n                });\n            }\n            this.floatLabel = 'always';\n            this._changeDetectorRef.markForCheck();\n        }\n    };\n    /**\n     * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n     * or child element with the `mat-placeholder` directive).\n     * @return {?}\n     */\n    MatFormField.prototype._validatePlaceholders = /**\n     * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n     * or child element with the `mat-placeholder` directive).\n     * @return {?}\n     */\n    function () {\n        if (this._control.placeholder && this._placeholderChild) {\n            throw getMatFormFieldPlaceholderConflictError();\n        }\n    };\n    /**\n     * Does any extra processing that is required when handling the hints.\n     * @return {?}\n     */\n    MatFormField.prototype._processHints = /**\n     * Does any extra processing that is required when handling the hints.\n     * @return {?}\n     */\n    function () {\n        this._validateHints();\n        this._syncDescribedByIds();\n    };\n    /**\n     * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n     * attribute being considered as `align=\"start\"`.\n     * @return {?}\n     */\n    MatFormField.prototype._validateHints = /**\n     * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n     * attribute being considered as `align=\"start\"`.\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this._hintChildren) {\n            var /** @type {?} */ startHint_1;\n            var /** @type {?} */ endHint_1;\n            this._hintChildren.forEach(function (hint) {\n                if (hint.align === 'start') {\n                    if (startHint_1 || _this.hintLabel) {\n                        throw getMatFormFieldDuplicatedHintError('start');\n                    }\n                    startHint_1 = hint;\n                }\n                else if (hint.align === 'end') {\n                    if (endHint_1) {\n                        throw getMatFormFieldDuplicatedHintError('end');\n                    }\n                    endHint_1 = hint;\n                }\n            });\n        }\n    };\n    /**\n     * Sets the list of element IDs that describe the child control. This allows the control to update\n     * its `aria-describedby` attribute accordingly.\n     * @return {?}\n     */\n    MatFormField.prototype._syncDescribedByIds = /**\n     * Sets the list of element IDs that describe the child control. This allows the control to update\n     * its `aria-describedby` attribute accordingly.\n     * @return {?}\n     */\n    function () {\n        if (this._control) {\n            var /** @type {?} */ ids = [];\n            if (this._getDisplayedMessages() === 'hint') {\n                var /** @type {?} */ startHint = this._hintChildren ?\n                    this._hintChildren.find(function (hint) { return hint.align === 'start'; }) : null;\n                var /** @type {?} */ endHint = this._hintChildren ?\n                    this._hintChildren.find(function (hint) { return hint.align === 'end'; }) : null;\n                if (startHint) {\n                    ids.push(startHint.id);\n                }\n                else if (this._hintLabel) {\n                    ids.push(this._hintLabelId);\n                }\n                if (endHint) {\n                    ids.push(endHint.id);\n                }\n            }\n            else if (this._errorChildren) {\n                ids = this._errorChildren.map(function (error) { return error.id; });\n            }\n            this._control.setDescribedByIds(ids);\n        }\n    };\n    /** Throws an error if the form field's control is missing. */\n    /**\n     * Throws an error if the form field's control is missing.\n     * @return {?}\n     */\n    MatFormField.prototype._validateControlChild = /**\n     * Throws an error if the form field's control is missing.\n     * @return {?}\n     */\n    function () {\n        if (!this._control) {\n            throw getMatFormFieldMissingControlError();\n        }\n    };\n    /**\n     * Updates the width and position of the gap in the outline. Only relevant for the outline\n     * appearance.\n     */\n    /**\n     * Updates the width and position of the gap in the outline. Only relevant for the outline\n     * appearance.\n     * @return {?}\n     */\n    MatFormField.prototype.updateOutlineGap = /**\n     * Updates the width and position of the gap in the outline. Only relevant for the outline\n     * appearance.\n     * @return {?}\n     */\n    function () {\n        if (this.appearance === 'outline' && this._label && this._label.nativeElement.children.length) {\n            if (this._platform && !this._platform.isBrowser) {\n                // getBoundingClientRect isn't available on the server.\n                this._initialGapCalculated = true;\n                return;\n            }\n            if (!document.documentElement.contains(this._elementRef.nativeElement)) {\n                return;\n            }\n            var /** @type {?} */ containerStart = this._getStartEnd(this._connectionContainerRef.nativeElement.getBoundingClientRect());\n            var /** @type {?} */ labelStart = this._getStartEnd(this._label.nativeElement.children[0].getBoundingClientRect());\n            var /** @type {?} */ labelWidth = 0;\n            for (var _i = 0, _a = this._label.nativeElement.children; _i < _a.length; _i++) {\n                var child = _a[_i];\n                labelWidth += child.offsetWidth;\n            }\n            this._outlineGapStart = labelStart - containerStart - outlineGapPadding;\n            this._outlineGapWidth = labelWidth * floatingLabelScale + outlineGapPadding * 2;\n        }\n        else {\n            this._outlineGapStart = 0;\n            this._outlineGapWidth = 0;\n        }\n        this._initialGapCalculated = true;\n        this._changeDetectorRef.markForCheck();\n    };\n    /**\n     * Gets the start end of the rect considering the current directionality.\n     * @param {?} rect\n     * @return {?}\n     */\n    MatFormField.prototype._getStartEnd = /**\n     * Gets the start end of the rect considering the current directionality.\n     * @param {?} rect\n     * @return {?}\n     */\n    function (rect) {\n        return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n    };\n    MatFormField.decorators = [\n        { type: Component, args: [{selector: 'mat-form-field',\n                    exportAs: 'matFormField',\n                    template: \"<div class=\\\"mat-form-field-wrapper\\\"><div class=\\\"mat-form-field-flex\\\" #connectionContainer (click)=\\\"_control.onContainerClick && _control.onContainerClick($event)\\\"><ng-container *ngIf=\\\"appearance == 'outline'\\\"><div class=\\\"mat-form-field-outline\\\"><div class=\\\"mat-form-field-outline-start\\\" [style.width.px]=\\\"_outlineGapStart\\\"></div><div class=\\\"mat-form-field-outline-gap\\\" [style.width.px]=\\\"_outlineGapWidth\\\"></div><div class=\\\"mat-form-field-outline-end\\\"></div></div><div class=\\\"mat-form-field-outline mat-form-field-outline-thick\\\"><div class=\\\"mat-form-field-outline-start\\\" [style.width.px]=\\\"_outlineGapStart\\\"></div><div class=\\\"mat-form-field-outline-gap\\\" [style.width.px]=\\\"_outlineGapWidth\\\"></div><div class=\\\"mat-form-field-outline-end\\\"></div></div></ng-container><div class=\\\"mat-form-field-prefix\\\" *ngIf=\\\"_prefixChildren.length\\\"><ng-content select=\\\"[matPrefix]\\\"></ng-content></div><div class=\\\"mat-form-field-infix\\\" #inputContainer><ng-content></ng-content><span class=\\\"mat-form-field-label-wrapper\\\"><label class=\\\"mat-form-field-label\\\" [id]=\\\"_labelId\\\" [attr.for]=\\\"_control.id\\\" [attr.aria-owns]=\\\"_control.id\\\" [class.mat-empty]=\\\"_control.empty && !_shouldAlwaysFloat\\\" [class.mat-form-field-empty]=\\\"_control.empty && !_shouldAlwaysFloat\\\" [class.mat-accent]=\\\"color == 'accent'\\\" [class.mat-warn]=\\\"color == 'warn'\\\" #label *ngIf=\\\"_hasFloatingLabel()\\\" [ngSwitch]=\\\"_hasLabel()\\\"><ng-container *ngSwitchCase=\\\"false\\\"><ng-content select=\\\"mat-placeholder\\\"></ng-content>{{_control.placeholder}}</ng-container><ng-content select=\\\"mat-label\\\" *ngSwitchCase=\\\"true\\\"></ng-content><span class=\\\"mat-placeholder-required mat-form-field-required-marker\\\" aria-hidden=\\\"true\\\" *ngIf=\\\"!hideRequiredMarker && _control.required && !_control.disabled\\\">&nbsp;*</span></label></span></div><div class=\\\"mat-form-field-suffix\\\" *ngIf=\\\"_suffixChildren.length\\\"><ng-content select=\\\"[matSuffix]\\\"></ng-content></div></div><div class=\\\"mat-form-field-underline\\\" #underline *ngIf=\\\"appearance != 'outline'\\\"><span class=\\\"mat-form-field-ripple\\\" [class.mat-accent]=\\\"color == 'accent'\\\" [class.mat-warn]=\\\"color == 'warn'\\\"></span></div><div class=\\\"mat-form-field-subscript-wrapper\\\" [ngSwitch]=\\\"_getDisplayedMessages()\\\"><div *ngSwitchCase=\\\"'error'\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\"><ng-content select=\\\"mat-error\\\"></ng-content></div><div class=\\\"mat-form-field-hint-wrapper\\\" *ngSwitchCase=\\\"'hint'\\\" [@transitionMessages]=\\\"_subscriptAnimationState\\\"><div *ngIf=\\\"hintLabel\\\" [id]=\\\"_hintLabelId\\\" class=\\\"mat-hint\\\">{{hintLabel}}</div><ng-content select=\\\"mat-hint:not([align='end'])\\\"></ng-content><div class=\\\"mat-form-field-hint-spacer\\\"></div><ng-content select=\\\"mat-hint[align='end']\\\"></ng-content></div></div></div>\",\n                    // MatInput is a directive and can't have styles, so we need to include its styles here.\n                    // The MatInput styles are fairly minimal so it shouldn't be a big deal for people who\n                    // aren't using MatInput.\n                    styles: [\".mat-form-field{display:inline-block;position:relative;text-align:left}[dir=rtl] .mat-form-field{text-align:right}.mat-form-field-wrapper{position:relative}.mat-form-field-flex{display:inline-flex;align-items:baseline;box-sizing:border-box;width:100%}.mat-form-field-prefix,.mat-form-field-suffix{white-space:nowrap;flex:none;position:relative}.mat-form-field-infix{display:block;position:relative;flex:auto;min-width:0;width:180px}@media screen and (-ms-high-contrast:active){.mat-form-field-infix{border-image:linear-gradient(transparent,transparent)}}.mat-form-field-label-wrapper{position:absolute;left:0;box-sizing:content-box;width:100%;height:100%;overflow:hidden;pointer-events:none}.mat-form-field-label{position:absolute;left:0;font:inherit;pointer-events:none;width:100%;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transform-origin:0 0;transition:transform .4s cubic-bezier(.25,.8,.25,1),color .4s cubic-bezier(.25,.8,.25,1),width .4s cubic-bezier(.25,.8,.25,1);display:none}[dir=rtl] .mat-form-field-label{transform-origin:100% 0;left:auto;right:0}.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label,.mat-form-field-empty.mat-form-field-label{display:block}.mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{display:block;transition:none}.mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:none}.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-can-float .mat-input-server[placeholder]:not(:placeholder-shown)+.mat-form-field-label-wrapper .mat-form-field-label{display:block}.mat-form-field-label:not(.mat-form-field-empty){transition:none}.mat-form-field-underline{position:absolute;width:100%;pointer-events:none;transform:scaleY(1.0001)}.mat-form-field-ripple{position:absolute;left:0;width:100%;transform-origin:50%;transform:scaleX(.5);opacity:0;transition:background-color .3s cubic-bezier(.55,0,.55,.2)}.mat-form-field.mat-focused .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple{opacity:1;transform:scaleX(1);transition:transform .3s cubic-bezier(.25,.8,.25,1),opacity .1s cubic-bezier(.25,.8,.25,1),background-color .3s cubic-bezier(.25,.8,.25,1)}.mat-form-field-subscript-wrapper{position:absolute;box-sizing:border-box;width:100%;overflow:hidden}.mat-form-field-label-wrapper .mat-icon,.mat-form-field-subscript-wrapper .mat-icon{width:1em;height:1em;font-size:inherit;vertical-align:baseline}.mat-form-field-hint-wrapper{display:flex}.mat-form-field-hint-spacer{flex:1 0 1em}.mat-error{display:block}.mat-form-field._mat-animation-noopable .mat-form-field-label,.mat-form-field._mat-animation-noopable .mat-form-field-ripple{transition:none} .mat-form-field-appearance-fill .mat-form-field-flex{border-radius:4px 4px 0 0;padding:.75em .75em 0 .75em}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-fill .mat-form-field-flex{outline:solid 1px}}.mat-form-field-appearance-fill .mat-form-field-underline::before{content:'';display:block;position:absolute;bottom:0;height:1px;width:100%}.mat-form-field-appearance-fill .mat-form-field-ripple{bottom:0;height:2px}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-fill .mat-form-field-ripple{height:0;border-top:solid 2px}}.mat-form-field-appearance-fill:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity .6s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-fill._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none}.mat-form-field-appearance-fill .mat-form-field-subscript-wrapper{padding:0 1em} .mat-form-field-appearance-legacy .mat-form-field-label{transform:perspective(100px);-ms-transform:none}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon{width:1em}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button{font:inherit;vertical-align:baseline}.mat-form-field-appearance-legacy .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .mat-icon-button .mat-icon{font-size:inherit}.mat-form-field-appearance-legacy .mat-form-field-underline{height:1px}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-legacy .mat-form-field-underline{height:0;border-top:solid 1px}}.mat-form-field-appearance-legacy .mat-form-field-ripple{top:0;height:2px}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-legacy .mat-form-field-ripple{height:0;border-top:solid 2px}}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}}.mat-form-field-appearance-legacy.mat-form-field-invalid:not(.mat-focused) .mat-form-field-ripple{height:1px} .mat-form-field-appearance-outline .mat-form-field-wrapper{margin:.25em 0}.mat-form-field-appearance-outline .mat-form-field-flex{padding:0 .75em 0 .75em;margin-top:-.25em;position:relative}.mat-form-field-appearance-outline .mat-form-field-prefix,.mat-form-field-appearance-outline .mat-form-field-suffix{top:.25em}.mat-form-field-appearance-outline .mat-form-field-outline{display:flex;position:absolute;top:.25em;left:0;right:0;bottom:0;pointer-events:none}.mat-form-field-appearance-outline .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-start{border:1px solid currentColor;min-width:5px}.mat-form-field-appearance-outline .mat-form-field-outline-start{border-radius:5px 0 0 5px;border-right-style:none}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-start{border-right-style:solid;border-left-style:none;border-radius:0 5px 5px 0}.mat-form-field-appearance-outline .mat-form-field-outline-end{border-radius:0 5px 5px 0;border-left-style:none;flex-grow:1}[dir=rtl] .mat-form-field-appearance-outline .mat-form-field-outline-end{border-left-style:solid;border-right-style:none;border-radius:5px 0 0 5px}.mat-form-field-appearance-outline .mat-form-field-outline-gap{border-radius:.000001px;border:1px solid currentColor;border-left-style:none;border-right-style:none}.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-outline-gap{border-top-color:transparent}.mat-form-field-appearance-outline .mat-form-field-outline-thick{opacity:0}.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-end,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-gap,.mat-form-field-appearance-outline .mat-form-field-outline-thick .mat-form-field-outline-start{border-width:2px;transition:border-color .3s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline{opacity:0;transition:opacity .1s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline{opacity:0;transition:opacity .6s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-outline:not(.mat-form-field-disabled) .mat-form-field-flex:hover .mat-form-field-outline-thick{opacity:1}.mat-form-field-appearance-outline .mat-form-field-subscript-wrapper{padding:0 1em}.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-end,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-gap,.mat-form-field-appearance-outline._mat-animation-noopable .mat-form-field-outline-start,.mat-form-field-appearance-outline._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-outline{transition:none} .mat-form-field-appearance-standard .mat-form-field-flex{padding-top:.75em}.mat-form-field-appearance-standard .mat-form-field-underline{height:1px}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-standard .mat-form-field-underline{height:0;border-top:solid 1px}}.mat-form-field-appearance-standard .mat-form-field-ripple{bottom:0;height:2px}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-standard .mat-form-field-ripple{height:0;border-top:2px}}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-position:0;background-color:transparent}@media screen and (-ms-high-contrast:active){.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{border-top-style:dotted;border-top-width:2px}}.mat-form-field-appearance-standard:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{opacity:1;transform:none;transition:opacity .6s cubic-bezier(.25,.8,.25,1)}.mat-form-field-appearance-standard._mat-animation-noopable:not(.mat-form-field-disabled) .mat-form-field-flex:hover~.mat-form-field-underline .mat-form-field-ripple{transition:none} .mat-input-element{font:inherit;background:0 0;color:currentColor;border:none;outline:0;padding:0;margin:0;width:100%;max-width:100%;vertical-align:bottom;text-align:inherit}.mat-input-element:-moz-ui-invalid{box-shadow:none}.mat-input-element::-ms-clear,.mat-input-element::-ms-reveal{display:none}.mat-input-element,.mat-input-element::-webkit-search-cancel-button,.mat-input-element::-webkit-search-decoration,.mat-input-element::-webkit-search-results-button,.mat-input-element::-webkit-search-results-decoration{-webkit-appearance:none}.mat-input-element::-webkit-caps-lock-indicator,.mat-input-element::-webkit-contacts-auto-fill-button,.mat-input-element::-webkit-credentials-auto-fill-button{visibility:hidden}.mat-input-element[type=date]::after,.mat-input-element[type=datetime-local]::after,.mat-input-element[type=datetime]::after,.mat-input-element[type=month]::after,.mat-input-element[type=time]::after,.mat-input-element[type=week]::after{content:' ';white-space:pre;width:1px}.mat-input-element::placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-input-element::-moz-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-input-element::-webkit-input-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-input-element:-ms-input-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}.mat-form-field-hide-placeholder .mat-input-element::placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-moz-placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element::-webkit-input-placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}.mat-form-field-hide-placeholder .mat-input-element:-ms-input-placeholder{color:transparent!important;-webkit-text-fill-color:transparent;transition:none}textarea.mat-input-element{resize:vertical;overflow:auto}textarea.mat-input-element.cdk-textarea-autosize{resize:none}textarea.mat-input-element{padding:2px 0;margin:-2px 0}\"],\n                    animations: [matFormFieldAnimations.transitionMessages],\n                    host: {\n                        'class': 'mat-form-field',\n                        '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n                        '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n                        '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n                        '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n                        '[class.mat-form-field-invalid]': '_control.errorState',\n                        '[class.mat-form-field-can-float]': '_canLabelFloat',\n                        '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n                        '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n                        '[class.mat-form-field-disabled]': '_control.disabled',\n                        '[class.mat-form-field-autofilled]': '_control.autofilled',\n                        '[class.mat-focused]': '_control.focused',\n                        '[class.mat-accent]': 'color == \"accent\"',\n                        '[class.mat-warn]': 'color == \"warn\"',\n                        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n                        '[class.ng-touched]': '_shouldForward(\"touched\")',\n                        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n                        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n                        '[class.ng-valid]': '_shouldForward(\"valid\")',\n                        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n                        '[class.ng-pending]': '_shouldForward(\"pending\")',\n                        '[class._mat-animation-noopable]': '!_animationsEnabled',\n                    },\n                    inputs: ['color'],\n                    encapsulation: ViewEncapsulation.None,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                },] },\n    ];\n    /** @nocollapse */\n    MatFormField.ctorParameters = function () { return [\n        { type: ElementRef, },\n        { type: ChangeDetectorRef, },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_LABEL_GLOBAL_OPTIONS,] },] },\n        { type: Directionality, decorators: [{ type: Optional },] },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD_DEFAULT_OPTIONS,] },] },\n        { type: Platform, },\n        { type: NgZone, },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] },] },\n    ]; };\n    MatFormField.propDecorators = {\n        \"appearance\": [{ type: Input },],\n        \"hideRequiredMarker\": [{ type: Input },],\n        \"hintLabel\": [{ type: Input },],\n        \"floatLabel\": [{ type: Input },],\n        \"underlineRef\": [{ type: ViewChild, args: ['underline',] },],\n        \"_connectionContainerRef\": [{ type: ViewChild, args: ['connectionContainer',] },],\n        \"_inputContainerRef\": [{ type: ViewChild, args: ['inputContainer',] },],\n        \"_label\": [{ type: ViewChild, args: ['label',] },],\n        \"_control\": [{ type: ContentChild, args: [MatFormFieldControl,] },],\n        \"_placeholderChild\": [{ type: ContentChild, args: [MatPlaceholder,] },],\n        \"_labelChild\": [{ type: ContentChild, args: [MatLabel,] },],\n        \"_errorChildren\": [{ type: ContentChildren, args: [MatError,] },],\n        \"_hintChildren\": [{ type: ContentChildren, args: [MatHint,] },],\n        \"_prefixChildren\": [{ type: ContentChildren, args: [MatPrefix,] },],\n        \"_suffixChildren\": [{ type: ContentChildren, args: [MatSuffix,] },],\n    };\n    return MatFormField;\n}(_MatFormFieldMixinBase));\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MatFormFieldModule = /** @class */ (function () {\n    function MatFormFieldModule() {\n    }\n    MatFormFieldModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: [\n                        MatError,\n                        MatFormField,\n                        MatHint,\n                        MatLabel,\n                        MatPlaceholder,\n                        MatPrefix,\n                        MatSuffix,\n                    ],\n                    imports: [CommonModule],\n                    exports: [\n                        MatError,\n                        MatFormField,\n                        MatHint,\n                        MatLabel,\n                        MatPlaceholder,\n                        MatPrefix,\n                        MatSuffix,\n                    ],\n                },] },\n    ];\n    return MatFormFieldModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { MatFormFieldModule, MatError, MatFormFieldBase, _MatFormFieldMixinBase, MAT_FORM_FIELD_DEFAULT_OPTIONS, MatFormField, MatFormFieldControl, getMatFormFieldPlaceholderConflictError, getMatFormFieldDuplicatedHintError, getMatFormFieldMissingControlError, MatHint, MatPlaceholder, MatPrefix, MatSuffix, MatLabel, matFormFieldAnimations };\n//# sourceMappingURL=form-field.es5.js.map\n"],"sourceRoot":""}